#!/usr/bin/env node

/**
 * @fileoverview Universal Test Runner
 *
 * This script provides a command-line interface for running e2e tests with the syntax:
 * npm test [test-type | all] [module-name | all]
 *
 * Examples:
 * npm test comprehensive wsdot-highway-cameras
 * npm test auto wsf-fares
 * npm test data-integrity all
 * npm test all all
 */

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

// Available test types
const TEST_TYPES = {
  comprehensive: "tests/e2e/comprehensive-suite.test.ts",
  clean: "tests/e2e/clean-archive-suite.test.ts",
  simple: "tests/e2e/simple-suite.test.ts",
  "archive-style": "tests/e2e/clean-archive-suite.test.ts",
  auto: "tests/e2e/auto-suite.test.ts",
  "data-integrity": "tests/e2e/data-integrity-suite.test.ts",
  discovery: "tests/e2e/discovery.test.ts",
  all: "all",
};

// Available API modules
const API_MODULES = [
  "wsdot-border-crossings",
  "wsdot-bridge-clearances",
  "wsdot-commercial-vehicle-restrictions",
  "wsdot-highway-alerts",
  "wsdot-highway-cameras",
  "wsdot-mountain-pass-conditions",
  "wsdot-toll-rates",
  "wsdot-traffic-flow",
  "wsdot-travel-times",
  "wsdot-weather-information",
  "wsdot-weather-information-extended",
  "wsdot-weather-stations",
  "wsf-fares",
  "wsf-schedule",
  "wsf-terminals",
  "wsf-vessels",
];

// Configuration for API filtering
const DISCOVERY_CONFIG_TEMPLATE = `/**
 * @fileoverview Auto-generated discovery config for test filtering
 * Generated by test-runner.js - do not edit manually
 */

module.exports = {
  testRunnerConfig: {
    includeAllEndpoints: false,
    includedApis: API_LIST_PLACEHOLDER,
    excludedApis: [],
    excludedEndpoints: [],
    validateEndpoints: true,
    enableDebugOutput: false,
    generateAllConfigs: false,
    configGenerationApis: API_LIST_PLACEHOLDER,
  }
};
`;

/**
 * Main execution function
 */
function main() {
  const args = process.argv.slice(2);

  if (args.length === 0) {
    showUsage();
    process.exit(1);
  }

  const testType = args[0];
  const moduleName = args[1] || "all";

  // Validate test type
  if (!TEST_TYPES[testType]) {
    console.error(`❌ Error: Invalid test type "${testType}"`);
    console.log("");
    showUsage();
    process.exit(1);
  }

  // Validate module name
  if (moduleName !== "all" && !API_MODULES.includes(moduleName)) {
    console.error(`❌ Error: Invalid module name "${moduleName}"`);
    console.log("");
    showAvailableModules();
    process.exit(1);
  }

  // Run the tests
  runTests(testType, moduleName);
}

/**
 * Runs the specified tests
 */
function runTests(testType, moduleName) {
  console.log(
    `🚀 Running ${testType} tests${moduleName !== "all" ? ` for ${moduleName}` : " for all modules"}...`
  );

  if (testType === "all") {
    runAllTestTypes(moduleName);
  } else {
    runSingleTestType(testType, moduleName);
  }
}

/**
 * Runs all test types for the specified module
 */
function runAllTestTypes(moduleName) {
  const testTypes = Object.keys(TEST_TYPES).filter((type) => type !== "all");

  for (const testType of testTypes) {
    console.log(`\n📋 Running ${testType} tests...`);
    runSingleTestType(testType, moduleName);
  }
}

/**
 * Runs a single test type for the specified module
 */
function runSingleTestType(testType, moduleName) {
  const testFile = TEST_TYPES[testType];

  if (testFile === "all") {
    console.error("❌ Error: Cannot run 'all' test type recursively");
    process.exit(1);
  }

  // Set up API filtering if not testing all modules
  if (moduleName !== "all") {
    setupApiFiltering([moduleName]);
  } else {
    setupApiFiltering(API_MODULES);
  }

  // Auto-regenerate configurations first
  console.log("🔄 Auto-regenerating configurations...");
  try {
    execSync("node tests/e2e/scripts/run-auto-config-generation-quiet.js", {
      stdio: "pipe",
      cwd: process.cwd(),
    });
    console.log("✅ Configurations regenerated");
  } catch (error) {
    console.warn(
      "⚠️ Auto-regeneration failed, continuing with existing configs"
    );
  }

  // Run the test directly with vitest
  const command = `npx vitest --config config/vitest.config.ts --run ${testFile}`;

  try {
    console.log(`🧪 Executing: ${command}`);
    execSync(command, {
      stdio: "inherit",
      cwd: process.cwd(),
      env: { ...process.env, DISCOVERY_CONFIG_MODE: "test-runner" },
    });
    console.log(`✅ ${testType} tests completed successfully`);
  } catch (error) {
    console.error(`❌ ${testType} tests failed`);
    process.exit(1);
  }
}

/**
 * Sets up API filtering by creating a temporary discovery config
 */
function setupApiFiltering(apiList) {
  const configPath = path.join(
    __dirname,
    "..",
    "tests",
    "e2e",
    "config",
    "testRunnerConfig.js"
  );

  // Create the config content
  const configContent = DISCOVERY_CONFIG_TEMPLATE.replace(
    /API_LIST_PLACEHOLDER/g,
    JSON.stringify(apiList)
  );

  // Write the config file
  fs.writeFileSync(configPath, configContent);

  // Set environment variable to use this config
  process.env.DISCOVERY_CONFIG_MODE = "test-runner";
}

/**
 * Shows usage information
 */
function showUsage() {
  console.log("Usage: npm test [test-type | all] [module-name | all]");
  console.log("");
  console.log("Test Types:");
  Object.keys(TEST_TYPES).forEach((type) => {
    console.log(`  • ${type}`);
  });
  console.log("");
  console.log("Examples:");
  console.log("  npm test comprehensive wsdot-highway-cameras");
  console.log("  npm test auto wsf-fares");
  console.log("  npm test data-integrity all");
  console.log("  npm test all all");
  console.log("");
  showAvailableModules();
}

/**
 * Shows available API modules
 */
function showAvailableModules() {
  console.log("Available Modules:");

  const wsfApis = API_MODULES.filter((api) => api.startsWith("wsf-"));
  const wsdotApis = API_MODULES.filter((api) => api.startsWith("wsdot-"));

  if (wsfApis.length > 0) {
    console.log("  🚢 WSF APIs:");
    wsfApis.forEach((api) => {
      console.log(`    • ${api}`);
    });
  }

  if (wsdotApis.length > 0) {
    console.log("  🛣️  WSDOT APIs:");
    wsdotApis.forEach((api) => {
      console.log(`    • ${api}`);
    });
  }

  console.log("  • all (run for all modules)");
}

// Run the main function
if (require.main === module) {
  main();
}

module.exports = {
  main,
  TEST_TYPES,
  API_MODULES,
};
