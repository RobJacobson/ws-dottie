/**
 * @fileoverview WSF Terminal Verbose API
 * 
 * This module provides access to comprehensive, detailed information for Washington State Ferries terminals.
 * It combines data from multiple terminal APIs into a single endpoint, including basic terminal information,
 * detailed addresses and directions, facility amenities, transportation options, bulletins and alerts,
 * wait time recommendations, and transit links. This is the most complete terminal information endpoint.
 * 
 * @api WSF Terminal Verbose
 * @see {@link https://www.wsdot.wa.gov/ferries/api/terminals/rest/terminalverbose WSDOT Terminal Verbose API}
 * 
 * @functions
 * - getTerminalVerboseByTerminalId - Retrieve comprehensive terminal info for a specific terminal
 * - getTerminalVerbose - Retrieve comprehensive terminal info for all terminals
 * 
 * @input
 * - Terminal ID (for specific terminal queries)
 * - No parameters required for all terminals query
 * 
 * @output
 * - TerminalVerbose object with comprehensive terminal details
 * - Array of TerminalVerbose objects for all terminals
 * 
 * @baseType
 * TerminalVerbose interface containing:
 * - Basic terminal identification (ID, name, abbreviation, region)
 * - Complete address information and driving directions
 * - GPS coordinates and GIS zoom locations
 * - Facility amenities (elevator, waiting room, food service, restroom)
 * - Transportation information (parking, airport, motorcycle, truck, bike, train, taxi, HOV)
 * - Real-time status flags and messages
 * - Bulletins and alerts
 * - Transit links and chamber of commerce information
 * - Wait time recommendations
 * 
 * @curl
 * ```bash
 * curl "https://www.wsdot.wa.gov/ferries/api/terminals/rest/terminalverbose?apiaccesscode=YOUR_TOKEN"
 * ```
 * 
 * @exampleResponse
 * ```json
 * {
 *   "TerminalID": 20,
 *   "TerminalSubjectID": 105,
 *   "RegionID": 5,
 *   "TerminalName": "Southworth",
 *   "TerminalAbbrev": "SOU",
 *   "SortSeq": 35,
 *   "OverheadPassengerLoading": false,
 *   "Elevator": false,
 *   "WaitingRoom": true,
 *   "FoodService": true,
 *   "Restroom": true,
 *   "Latitude": 47.513064,
 *   "Longitude": -122.495742,
 *   "AddressLineOne": "11700 SE SEDGWICK RD",
 *   "AddressLineTwo": null,
 *   "City": "Southworth",
 *   "State": "WA",
 *   "ZipCode": "98386",
 *   "Country": "USA",
 *   "MapLink": "http://maps.google.com/maps?q=Southworth+Ferry+Lot,+Kitsap,+WA&hl=en&ll=47.512592,-122.496271&spn=0.010841,0.019205&sll=47.511925,-122.499543&sspn=0.010841,0.019205&oq=Southworth+Ferry+&hnear=Southworth+Ferry+Lot&t=m&z=16",
 *   "Directions": "From I-5: Take exit 132 and proceed west on Hwy 16 approximately 23 miles to Hwy 160 exit...",
 *   "DispGISZoomLoc": [
 *     {
 *       "ZoomLevel": 0,
 *       "Latitude": 47.513064,
 *       "Longitude": -122.495742
 *     }
 *   ],
 *   "ParkingInfo": "Parking is available in an adjacent parking lot and managed by U-Park System...",
 *   "AirportInfo": null,
 *   "AirportShuttleInfo": "The Kitsap Airporter provides bus service from Sea-Tac International Airport...",
 *   "MotorcycleInfo": "While motorcycles are not, by Washington Administrative Code...",
 *   "TruckInfo": "WSF requires trucks with a gross vehicle weight of over 80,000 lbs...",
 *   "BikeInfo": "Bicyclists may bypass the line of traffic...",
 *   "TrainInfo": null,
 *   "TaxiInfo": null,
 *   "HovInfo": "Carpool/Vanpools must be ticketed and in line 10 minutes before scheduled sailing time...",
 *   "TransitLinks": [
 *     {
 *       "LinkURL": "http://www.kitsaptransit.com/service/routed-buses",
 *       "LinkName": "Kitsap Transit",
 *       "SortSeq": null
 *     }
 *   ],
 *   "WaitTimes": [
 *     {
 *       "RouteID": null,
 *       "RouteName": null,
 *       "WaitTimeNotes": "Commuters may anticipate heavy traffic through the 8:20am sailing...",
 *       "WaitTimeLastUpdated": "/Date(1597779070000-0700)/",
 *       "WaitTimeIVRNotes": "Commuters may anticipate heavy traffic through the 8 20 AM sailing..."
 *     }
 *   ],
 *   "AdditionalInfo": "Vehicles should queue up (line up on SE Sedgwick Rd)...",
 *   "LostAndFoundInfo": "Lost and found items on this route are turned in to the Fauntleroy ferry terminal...",
 *   "SecurityInfo": "WSF has implemented a U.S. Coast Guard approved security plan...",
 *   "ConstructionInfo": null,
 *   "FoodServiceInfo": "<p><b>Galley Hours (Vessel #1)</b>...",
 *   "AdaInfo": null,
 *   "FareDiscountInfo": "We offer seniors (65+), persons with disabilities...",
 *   "TallySystemInfo": null,
 *   "ChamberOfCommerce": {
 *     "LinkURL": "http://www.portorchard.com/",
 *     "LinkName": "Port Orchard Chamber of Commerce",
 *     "SortSeq": null
 *   },
 *   "FacInfo": "Contact the Ferry Advisory Committee chair representing your community...",
 *   "ResourceStatus": null,
 *   "TypeDesc": "Passenger and Car",
 *   "REALTIME_SHUTOFF_FLAG": true,
 *   "REALTIME_SHUTOFF_MESSAGE": "Please check the ferry alert bulletins below...",
 *   "VisitorLinks": [],
 *   "Bulletins": [
 *     {
 *       "BulletinTitle": "PD/Tah - Route Will Be In Service To Start 8/27",
 *       "BulletinText": "<p>The Point Defiance/Tahlequah route will be in service to start the day of Wednesday, August 27/</p>",
 *       "BulletinSortSeq": 1,
 *       "BulletinLastUpdated": "/Date(1756268674557-0700)/",
 *       "BulletinLastUpdatedSortable": "20250826212434"
 *     }
 *   ],
 *   "IsNoFareCollected": null,
 *   "NoFareCollectedMsg": null,
 *   "RealtimeIntroMsg": "<strong>Approximate Vehicle Spaces Available in Holding Area</strong><br /><em>Note: Vehicles in line that have not been processed through a tollbooth are not counted here...</em>"
 * }
 * ```
 */

import type { UseQueryResult } from "@tanstack/react-query";
import { z } from "zod";

import { useQueryWithAutoUpdate } from "@/shared/tanstack";
import { tanstackQueryOptions } from "@/shared/tanstack";
import { zodFetch } from "@/shared/fetching";
import type { TanStackOptions } from "@/shared/tanstack";

import { getCacheFlushDateTerminals } from "../wsf/cacheFlushDate";
import { terminalBulletinItemSchema } from "./terminalBulletins";
import { terminalWaitTimeSchema } from "./terminalWaitTimes";

// ============================================================================
// API Functions
//
// getTerminalVerboseByTerminalId (singular item)
// getTerminalVerbose (array)
// ============================================================================

const ENDPOINT_BY_ID =
  "/ferries/api/terminals/rest/terminalverbose/{terminalId}";
const ENDPOINT_ALL = "/ferries/api/terminals/rest/terminalverbose";

/**
 * Retrieves comprehensive terminal information for a specific WSF terminal.
 * 
 * This function fetches complete terminal details including basic information, addresses,
 * facilities, transportation options, bulletins, wait times, and all related data for
 * a single terminal. This is the most comprehensive terminal information endpoint.
 * 
 * @param params - Parameters object containing the terminal ID
 * @param params.terminalId - The unique identifier for the terminal
 * @returns Promise resolving to a TerminalVerbose object with complete terminal details
 * 
 * @example
 * ```typescript
 * const terminalVerbose = await getTerminalVerboseByTerminalId({ terminalId: 20 });
 * console.log(terminalVerbose.TerminalName); // "Southworth"
 * console.log(terminalVerbose.AddressLineOne); // "11700 SE SEDGWICK RD"
 * console.log(terminalVerbose.WaitTimes.length); // Number of wait time entries
 * ```
 * 
 * @throws {Error} When the API request fails or returns invalid data
 * @see {@link TerminalVerbose} for the complete response structure
 */
export const getTerminalVerboseByTerminalId = async (
  params: GetTerminalVerboseByTerminalIdParams
): Promise<TerminalVerbose> => {
  return zodFetch(
    ENDPOINT_BY_ID,
    {
      input: getTerminalVerboseByTerminalIdParamsSchema,
      output: terminalVerboseSchema,
    },
    params
  );
};

/**
 * Retrieves comprehensive terminal information for all WSF terminals.
 * 
 * This function fetches complete terminal details for all terminals in the WSF system,
 * providing comprehensive information including addresses, facilities, transportation,
 * bulletins, wait times, and all related data across the entire ferry network.
 * 
 * @param params - Optional parameters object (currently unused, provided for future extensibility)
 * @returns Promise resolving to an array of TerminalVerbose objects
 * 
 * @example
 * ```typescript
 * const allTerminalVerbose = await getTerminalVerbose();
 * const southworth = allTerminalVerbose.find(t => t.TerminalName === "Southworth");
 * console.log(southworth?.AddressLineOne); // "11700 SE SEDGWICK RD"
 * console.log(southworth?.WaitTimes.length); // Number of wait time entries
 * ```
 * 
 * @throws {Error} When the API request fails or returns invalid data
 * @see {@link TerminalVerbose} for the complete response structure
 */
export const getTerminalVerbose = async (
  params: GetTerminalVerboseParams = {}
): Promise<TerminalVerbose[]> => {
  return zodFetch(
    ENDPOINT_ALL,
    {
      input: getTerminalVerboseParamsSchema,
      output: terminalVerboseArraySchema,
    },
    params
  );
};

// ============================================================================
// Input Schemas & Types
//
// getTerminalVerboseByTerminalIdParamsSchema
// getTerminalVerboseParamsSchema
// GetTerminalVerboseByTerminalIdParams
// GetTerminalVerboseParams
// ============================================================================

/**
 * Input schema for retrieving comprehensive terminal information for a specific terminal.
 * 
 * @description
 * Schema for the getTerminalVerboseByTerminalId function parameters.
 * Requires a terminal ID to identify which terminal's comprehensive information to retrieve.
 */
export const getTerminalVerboseByTerminalIdParamsSchema = z
  .object({
    terminalId: z.number().int().describe(""),
  })
  .describe("");

/**
 * Input schema for retrieving comprehensive terminal information for all terminals.
 * 
 * @description
 * Schema for the getTerminalVerbose function parameters.
 * Currently accepts no parameters but provided for future extensibility.
 */
export const getTerminalVerboseParamsSchema = z.object({}).describe("");

export type GetTerminalVerboseByTerminalIdParams = z.infer<
  typeof getTerminalVerboseByTerminalIdParamsSchema
>;

export type GetTerminalVerboseParams = z.infer<
  typeof getTerminalVerboseParamsSchema
>;

// ============================================================================
// Output Schemas & Types
//
// terminalTransitLinkSchema
// terminalWaitTimeSchema
// terminalVerboseSchema
// terminalVerboseArraySchema
// TerminalVerbose
// TerminalTransitLink
// TerminalWaitTime
// TerminalBulletinItem (imported from ./terminalBulletins)
// ============================================================================

/**
 * Schema for transit link information associated with terminals.
 * 
 * @description
 * Defines the structure for transit system links and connections available
 * at terminals, including URLs and display names for transit agencies.
 * 
 * @fields
 * - LinkName: Display name for the transit system
 * - LinkURL: URL to the transit system's website or information page
 * - SortSeq: Optional sorting sequence for display order
 */
export const terminalTransitLinkSchema = z
  .object({
    LinkName: z.string().describe(""),
    LinkURL: z.string().describe(""),
    SortSeq: z.number().int().nullable().describe(""),
  })
  .describe("");

/**
 * Schema for comprehensive terminal information combining all terminal data.
 * 
 * @description
 * Defines the structure for complete terminal information including basic details,
 * addresses, facilities, transportation options, bulletins, wait times, and more.
 * This schema validates the comprehensive terminal data returned by the WSF Terminal Verbose API.
 * 
 * @fields
 * - TerminalID: Unique identifier for the terminal
 * - TerminalSubjectID: Subject identifier for the terminal
 * - RegionID: Geographic region identifier
 * - TerminalName: Full name of the terminal
 * - TerminalAbbrev: Abbreviated terminal name
 * - SortSeq: Sorting sequence for display order
 * - AddressLineOne: Primary street address
 * - AddressLineTwo: Secondary address line (nullable)
 * - City: City name
 * - State: State abbreviation
 * - ZipCode: ZIP code
 * - Country: Country name
 * - Latitude: GPS latitude coordinate
 * - Longitude: GPS longitude coordinate
 * - Directions: Detailed driving directions
 * - DispGISZoomLoc: Array of GIS zoom locations for mapping
 * - MapLink: Google Maps link for the terminal
 * - Elevator: Whether terminal has elevator access
 * - WaitingRoom: Whether terminal has waiting room
 * - FoodService: Whether terminal has food service
 * - Restroom: Whether terminal has restrooms
 * - OverheadPassengerLoading: Whether terminal has overhead passenger loading
 * - IsNoFareCollected: Whether no fare is collected (nullable)
 * - NoFareCollectedMsg: Message about no fare collection (nullable)
 * - AdaInfo: ADA accessibility information (nullable)
 * - AdditionalInfo: Additional terminal information (nullable)
 * - AirportInfo: Airport connection information (nullable)
 * - AirportShuttleInfo: Airport shuttle service information (nullable)
 * - BikeInfo: Bicycle information and procedures (nullable)
 * - ChamberOfCommerce: Chamber of commerce link information (nullable)
 * - ConstructionInfo: Construction information (nullable)
 * - FacInfo: Ferry Advisory Committee information (nullable)
 * - FareDiscountInfo: Fare discount information (nullable)
 * - FoodServiceInfo: Detailed food service information (nullable)
 * - HovInfo: HOV/carpool information (nullable)
 * - LostAndFoundInfo: Lost and found information (nullable)
 * - MotorcycleInfo: Motorcycle procedures and information (nullable)
 * - ParkingInfo: Parking information and rates (nullable)
 * - ParkingShuttleInfo: Parking shuttle information (nullable)
 * - REALTIME_SHUTOFF_FLAG: Real-time data availability flag
 * - REALTIME_SHUTOFF_MESSAGE: Real-time data shutdown message (nullable)
 * - RealtimeIntroMsg: Real-time information introduction message (nullable)
 * - ResourceStatus: Resource status information (nullable)
 * - SecurityInfo: Security information (nullable)
 * - TallySystemInfo: Tally system information (nullable)
 * - TaxiInfo: Taxi service information (nullable)
 * - TrainInfo: Train connection information (nullable)
 * - TruckInfo: Truck procedures and restrictions (nullable)
 * - TypeDesc: Terminal type description (nullable)
 * - VisitorLinks: Array of visitor-related links (nullable)
 * - Bulletins: Array of terminal bulletins and alerts
 * - TransitLinks: Array of transit system connections
 * - WaitTimes: Array of wait time recommendations
 */
export const terminalVerboseSchema = z
  .object({
    TerminalID: z.number().int().describe(""),
    TerminalSubjectID: z.number().int().describe(""),
    RegionID: z.number().int().describe(""),
    TerminalName: z.string().describe(""),
    TerminalAbbrev: z.string().describe(""),
    SortSeq: z.number().int().describe(""),
    AddressLineOne: z.string().describe(""),
    AddressLineTwo: z.string().nullable().describe(""),
    City: z.string().describe(""),
    State: z.string().describe(""),
    ZipCode: z.string().describe(""),
    Country: z.string().describe(""),
    Latitude: z.number().describe(""),
    Longitude: z.number().describe(""),
    Directions: z.string().nullable().describe(""),
    DispGISZoomLoc: z
      .array(
        z
          .object({
            Latitude: z.number().describe(""),
            Longitude: z.number().describe(""),
            ZoomLevel: z.number().int().min(0).describe(""),
          })
          .describe("")
      )
      .describe(""),
    MapLink: z.string().nullable().describe(""),
    Elevator: z.boolean().describe(""),
    WaitingRoom: z.boolean().describe(""),
    FoodService: z.boolean().describe(""),
    Restroom: z.boolean().describe(""),
    OverheadPassengerLoading: z.boolean().describe(""),
    IsNoFareCollected: z.boolean().nullable().describe(""),
    NoFareCollectedMsg: z.string().nullable().describe(""),
    AdaInfo: z.string().nullable().describe(""),
    AdditionalInfo: z.string().nullable().describe(""),
    AirportInfo: z.string().nullable().describe(""),
    AirportShuttleInfo: z.string().nullable().describe(""),
    BikeInfo: z.string().nullable().describe(""),
    ChamberOfCommerce: terminalTransitLinkSchema.nullable().describe(""),
    ConstructionInfo: z.string().nullable().describe(""),
    FacInfo: z.string().nullable().describe(""),
    FareDiscountInfo: z.string().nullable().describe(""),
    FoodServiceInfo: z.string().nullable().describe(""),
    HovInfo: z.string().nullable().describe(""),
    LostAndFoundInfo: z.string().nullable().describe(""),
    MotorcycleInfo: z.string().nullable().describe(""),
    ParkingInfo: z.string().nullable().describe(""),
    ParkingShuttleInfo: z.string().nullable().describe(""),
    REALTIME_SHUTOFF_FLAG: z.boolean().describe(""),
    REALTIME_SHUTOFF_MESSAGE: z.string().nullable().describe(""),
    RealtimeIntroMsg: z.string().nullable().describe(""),
    ResourceStatus: z.string().nullable().describe(""),
    SecurityInfo: z.string().nullable().describe(""),
    TallySystemInfo: z.string().nullable().describe(""),
    TaxiInfo: z.string().nullable().describe(""),
    TrainInfo: z.string().nullable().describe(""),
    TruckInfo: z.string().nullable().describe(""),
    TypeDesc: z.string().nullable().describe(""),
    VisitorLinks: z.array(z.any()).nullable().describe(""),
    Bulletins: z.array(terminalBulletinItemSchema).describe(""),
    TransitLinks: z.array(terminalTransitLinkSchema).describe(""),
    WaitTimes: z.array(terminalWaitTimeSchema).describe(""),
  })
  .describe("");

/**
 * Schema for an array of comprehensive terminal information objects.
 * 
 * @description
 * Validates an array of TerminalVerbose objects, typically returned when
 * querying comprehensive terminal information for all terminals.
 */
export const terminalVerboseArraySchema = z
  .array(terminalVerboseSchema)
  .describe("");

export type TerminalVerbose = z.infer<typeof terminalVerboseSchema>;
export type TerminalTransitLink = z.infer<typeof terminalTransitLinkSchema>;

// ============================================================================
// TanStack Query Hooks
//
// useTerminalVerboseByTerminalId (singular item)
// useTerminalVerbose (array)
// ============================================================================

/**
 * TanStack Query hook for retrieving comprehensive terminal information for a specific terminal.
 * 
 * This hook automatically manages the data fetching lifecycle for comprehensive terminal
 * information, including caching, background updates, and error handling. It's optimized
 * for daily updates to ensure terminal information remains current.
 * 
 * @param params - Parameters object containing the terminal ID
 * @param params.terminalId - The unique identifier for the terminal
 * @param options - Optional TanStack Query options to override defaults
 * @returns TanStack Query result object with comprehensive terminal data
 * 
 * @example
 * ```typescript
 * const { data: terminalVerbose, isLoading, error } = useTerminalVerboseByTerminalId(
 *   { terminalId: 20 }
 * );
 * 
 * if (isLoading) return <div>Loading comprehensive terminal info...</div>;
 * if (error) return <div>Error: {error.message}</div>;
 * 
 * return (
 *   <div>
 *     <h2>{terminalVerbose.TerminalName} Terminal</h2>
 *     <p>Address: {terminalVerbose.AddressLineOne}, {terminalVerbose.City}, {terminalVerbose.State}</p>
 *     <div dangerouslySetInnerHTML={{ __html: terminalVerbose.ParkingInfo || 'No parking info' }} />
 *     <h3>Wait Times</h3>
 *     {terminalVerbose.WaitTimes.map((waitTime, index) => (
 *       <div key={index}>
 *         <h4>{waitTime.RouteName || 'General Info'}</h4>
 *         <div dangerouslySetInnerHTML={{ __html: waitTime.WaitTimeNotes || 'No wait time info' }} />
 *       </div>
 *     ))}
 *   </div>
 * );
 * ```
 * 
 * @see {@link getTerminalVerboseByTerminalId} for the underlying API function
 * @see {@link TerminalVerbose} for the complete data structure
 */
export const useTerminalVerboseByTerminalId = (
  params: GetTerminalVerboseByTerminalIdParams,
  options?: TanStackOptions<TerminalVerbose>
) => {
  return useQueryWithAutoUpdate({
    queryKey: ["wsf", "terminals", "verbose", params.terminalId],
    queryFn: () => getTerminalVerboseByTerminalId(params),
    fetchLastUpdateTime: getCacheFlushDateTerminals,
    options: { ...tanstackQueryOptions.DAILY_UPDATES, ...options },
  });
};

/**
 * TanStack Query hook for retrieving comprehensive terminal information for all terminals.
 * 
 * This hook automatically manages the data fetching lifecycle for all comprehensive terminal
 * information, including caching, background updates, and error handling. It's optimized
 * for daily updates to ensure terminal information remains current across all terminals.
 * 
 * @param options - Optional TanStack Query options to override defaults
 * @returns TanStack Query result object with array of comprehensive terminal data
 * 
 * @example
 * ```typescript
 * const { data: allTerminalVerbose, isLoading, error } = useTerminalVerbose();
 * 
 * if (isLoading) return <div>Loading all comprehensive terminal info...</div>;
 * if (error) return <div>Error: {error.message}</div>;
 * 
 * return (
 *   <div>
 *     {allTerminalVerbose.map(terminal => (
 *       <div key={terminal.TerminalID}>
 *         <h3>{terminal.TerminalName}</h3>
 *         <p>Address: {terminal.AddressLineOne}, {terminal.City}, {terminal.State}</p>
 *         <div dangerouslySetInnerHTML={{ __html: terminal.ParkingInfo || 'No parking info' }} />
 *         <h4>Bulletins ({terminal.Bulletins.length})</h4>
 *         {terminal.Bulletins.map((bulletin, index) => (
 *           <div key={index}>
 *             <h5>{bulletin.BulletinTitle}</h5>
 *             <div dangerouslySetInnerHTML={{ __html: bulletin.BulletinText }} />
 *           </div>
 *         ))}
 *       </div>
 *     ))}
 *   </div>
 * );
 * ```
 * 
 * @see {@link getTerminalVerbose} for the underlying API function
 * @see {@link TerminalVerbose} for the complete data structure
 */
export const useTerminalVerbose = (
  options?: TanStackOptions<TerminalVerbose[]>
): UseQueryResult<TerminalVerbose[], Error> => {
  return useQueryWithAutoUpdate({
    queryKey: ["wsf", "terminals", "verbose"],
    queryFn: getTerminalVerbose,
    fetchLastUpdateTime: getCacheFlushDateTerminals,
    options: { ...tanstackQueryOptions.DAILY_UPDATES, ...options },
  });
};
