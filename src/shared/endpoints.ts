/**
 * @fileoverview Simple Endpoint System
 *
 * A simple, unified endpoint system that eliminates complexity and duplication.
 *
 * This module provides the core endpoint definition system for the WS-Dottie API
 * library. It includes type definitions, factory functions, and discovery
 * utilities that work together to create a consistent endpoint management
 * system across all API modules.
 */

import type { z } from "zod";

import type { CacheStrategy } from "./types";
import { configManager } from "./utils/configManager";

/**
 * Simple endpoint definition interface for client files
 *
 * This interface defines the structure that client modules use to describe
 * their API endpoints. It includes all the necessary information for
 * validation, caching, and URL generation.
 */
export interface EndpointDefinition<I, O> {
  /** API group name (e.g., "wsdot-bridge-clearances") */
  api: string;
  /** Function name (e.g., "getBridgeClearances") */
  function: string;
  /** HTTP endpoint URL template */
  endpoint: string;
  /** Zod schema for input validation */
  inputSchema: z.ZodSchema<I>;
  /** Zod schema for output validation */
  outputSchema: z.ZodSchema<O>;
  /** Optional sample parameters for testing */
  sampleParams?: Partial<I> | (() => Promise<Partial<I>>);
  /** Cache strategy */
  cacheStrategy: CacheStrategy;
}

/**
 * Runtime endpoint interface with computed properties
 *
 * This interface extends EndpointDefinition with computed properties that are
 * automatically generated by the defineEndpoint factory function. These
 * properties include the complete URL template and a computed id for backward compatibility.
 */
export interface Endpoint<I, O> extends EndpointDefinition<I, O> {
  /** Function name (alias for function field) */
  functionName: string;
  /** Complete URL template with domain */
  urlTemplate: string;
  /** Computed unique identifier in format "api:function" for backward compatibility */
  id: string;
}

/**
 * Type alias for an array of endpoints with unknown input/output types
 *
 * This type is used throughout the system when the specific input/output
 * types are not known or needed, such as in discovery and testing functions.
 */
export type Endpoints = Endpoint<unknown, unknown>[];

/**
 * Type alias for endpoints grouped by API name
 *
 * This type represents the nested structure returned by discoverEndpoints(),
 * where endpoints are organized by their API group name for easier
 * organization and processing.
 */
export type EndpointsByApi = Record<string, Endpoints>;

/**
 * Type guard to ensure a value is an Endpoint at runtime
 */
const isEndpoint = (value: unknown): value is Endpoint<unknown, unknown> => {
  if (!value || typeof value !== "object") return false;
  const v = value as Record<string, unknown>;
  return (
    typeof v.api === "string" &&
    typeof v.function === "string" &&
    typeof v.endpoint === "string" &&
    typeof v.functionName === "string" &&
    typeof v.id === "string"
  );
};

/**
 * Creates a complete endpoint configuration object with computed properties
 *
 * This factory function takes a basic endpoint configuration and enriches it
 * with computed properties like the complete URL template and backward-compatible id.
 * It uses the provided api and function fields directly without parsing.
 *
 * @template I - The input parameters type for the endpoint
 * @template O - The output response type for the endpoint
 * @param definition - Basic endpoint configuration object
 * @returns Complete endpoint object with all computed properties:
 *   - `api`: API group name (from definition)
 *   - `function`: Function name (from definition)
 *   - `endpoint`: HTTP endpoint URL template relative to base domain
 *   - `inputSchema`: Zod schema for input parameter validation
 *   - `outputSchema`: Zod schema for output response validation
 *   - `sampleParams`: Optional sample parameters for testing
 *   - `cacheStrategy`: Cache strategy for TanStack Query integration
 *   - `functionName`: Function name (alias for function field)
 *   - `urlTemplate`: Complete URL template with domain (computed)
 *   - `id`: Computed unique identifier in format "api:function" for backward compatibility
 */
export function defineEndpoint<I, O>(
  definition: EndpointDefinition<I, O>
): Endpoint<I, O> {
  const urlTemplate = `${configManager.getDomain()}${definition.endpoint}`;
  const id = `${definition.api}:${definition.function}`;

  return {
    ...definition,
    functionName: definition.function,
    urlTemplate,
    id,
  };
}

/**
 * Discovers all endpoints from API modules
 *
 * This function uses static imports to access all API modules and extracts
 * endpoint objects from them. All API modules export ApiDefinition objects
 * that contain endpoint definitions which are automatically discovered and
 * organized by API group.
 *
 * @returns Object with endpoints grouped by API name, sorted alphabetically
 */
// Import all API modules statically
import { wsdotBorderCrossingsApi } from "@/apis/wsdot-border-crossings/endpoints";
import { wsdotBridgeClearancesApi } from "@/apis/wsdot-bridge-clearances/endpoints";
import { wsdotCommercialVehicleRestrictionsApi } from "@/apis/wsdot-commercial-vehicle-restrictions/endpoints";
import { wsdotHighwayAlertsApi } from "@/apis/wsdot-highway-alerts/endpoints";
import { wsdotHighwayCamerasApi } from "@/apis/wsdot-highway-cameras/endpoints";
import { wsdotMountainPassConditionsApi } from "@/apis/wsdot-mountain-pass-conditions/endpoints";
import { wsdotTollRatesApi } from "@/apis/wsdot-toll-rates/endpoints";
import { wsdotTrafficFlowApi } from "@/apis/wsdot-traffic-flow/endpoints";
import { wsdotTravelTimesApi } from "@/apis/wsdot-travel-times/endpoints";
import { wsdotWeatherApi } from "@/apis/wsdot-weather/endpoints";
import { wsfFaresApi } from "@/apis/wsf-fares/endpoints";
import { wsfScheduleApi } from "@/apis/wsf-schedule/endpoints";
import { wsfTerminalsApi } from "@/apis/wsf-terminals/endpoints";
import { wsfVesselsApi } from "@/apis/wsf-vessels/endpoints";

export const discoverEndpoints = (): EndpointsByApi => {
  // Use static imports to avoid async complexity
  // API modules are ordered alphabetically by API name for consistent results
  const apiModules = [
    wsdotBorderCrossingsApi,
    wsdotBridgeClearancesApi,
    wsdotCommercialVehicleRestrictionsApi,
    wsdotHighwayAlertsApi,
    wsdotHighwayCamerasApi,
    wsdotMountainPassConditionsApi,
    wsdotTollRatesApi,
    wsdotTrafficFlowApi,
    wsdotTravelTimesApi,
    wsdotWeatherApi,
    wsfFaresApi,
    wsfScheduleApi,
    wsfTerminalsApi,
    wsfVesselsApi,
  ];

  // Create nested structure grouped by API using functional approach
  const endpointsByApi = apiModules.reduce((acc, apiModule) => {
    // Convert endpoint definitions to full Endpoint objects using defineEndpoint
    const endpoints = apiModule.endpointDefinitions.map((definition) =>
      defineEndpoint(definition)
    );
    acc[apiModule.name] = endpoints;
    return acc;
  }, {} as EndpointsByApi);

  return endpointsByApi;
};

/**
 * Gets all endpoints as a flat array
 *
 * This is a convenience function that flattens the nested structure returned
 * by discoverEndpoints() into a single array. Useful when you need to iterate
 * over all endpoints regardless of their API grouping.
 *
 * @returns Array of all endpoints from all APIs
 */
export const getAllEndpoints = (): Endpoints => {
  const endpointsByApi = discoverEndpoints();
  return Object.values(endpointsByApi).flat();
};
