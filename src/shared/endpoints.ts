/**
 * @fileoverview Simple Endpoint System
 *
 * A simple, unified endpoint system that eliminates complexity and duplication.
 *
 * This module provides the core endpoint definition system for the WS-Dottie API
 * library. It includes type definitions, factory functions, and discovery
 * utilities that work together to create a consistent endpoint management
 * system across all API modules.
 */

import type { z } from "zod";

import type { CacheStrategy } from "./types";
import { configManager } from "./utils/configManager";

/**
 * Separator used in endpoint IDs to separate API name from endpoint name
 *
 * Format: "api-name:endpoint-name"
 * Example: "wsdot-bridge-clearances:getBridgeClearances"
 */
export const ENDPOINT_SEPARATOR = ":";

/**
 * Simple endpoint definition interface for client files
 *
 * This interface defines the structure that client modules use to describe
 * their API endpoints. It includes all the necessary information for
 * validation, caching, and URL generation.
 */
export interface EndpointDefinition<I, O> {
  /** Unique identifier in format "api/function" */
  id: string;
  /** HTTP endpoint URL template */
  endpoint: string;
  /** Zod schema for input validation */
  inputSchema: z.ZodSchema<I>;
  /** Zod schema for output validation */
  outputSchema: z.ZodSchema<O>;
  /** Optional sample parameters for testing */
  sampleParams?: Partial<I> | (() => Promise<Partial<I>>);
  /** Cache strategy */
  cacheStrategy: CacheStrategy;
}

/**
 * Runtime endpoint interface with computed properties
 *
 * This interface extends EndpointDefinition with computed properties that are
 * automatically generated by the defineEndpoint factory function. These
 * properties include API group name, function name, and complete URL template.
 */
export interface Endpoint<I, O> extends EndpointDefinition<I, O> {
  /** API group name (computed from id) */
  api: string;
  /** Function name (computed from id) */
  functionName: string;
  /** Complete URL template with domain */
  urlTemplate: string;
}

/**
 * Type alias for an array of endpoints with unknown input/output types
 *
 * This type is used throughout the system when the specific input/output
 * types are not known or needed, such as in discovery and testing functions.
 */
export type Endpoints = Endpoint<unknown, unknown>[];

/**
 * Type alias for endpoints grouped by API name
 *
 * This type represents the nested structure returned by discoverEndpoints(),
 * where endpoints are organized by their API group name for easier
 * organization and processing.
 */
export type EndpointsByApi = Record<string, Endpoints>;

/**
 * Type guard to ensure a value is an Endpoint at runtime
 */
const isEndpoint = (value: unknown): value is Endpoint<unknown, unknown> => {
  if (!value || typeof value !== "object") return false;
  const v = value as Record<string, unknown>;
  return (
    typeof v.id === "string" &&
    typeof v.endpoint === "string" &&
    typeof v.api === "string" &&
    typeof v.functionName === "string"
  );
};

/**
 * Creates a complete endpoint configuration object with computed properties
 *
 * This factory function takes a basic endpoint configuration and enriches it
 * with computed properties like API group name, function name, and complete
 * URL template. It automatically extracts the API and function names from
 * the endpoint ID and combines the domain with the endpoint path.
 *
 * @template I - The input parameters type for the endpoint
 * @template O - The output response type for the endpoint
 * @param definition - Basic endpoint configuration object
 * @returns Complete endpoint object with all computed properties:
 *   - `id`: Unique identifier in format "api/function"
 *   - `endpoint`: HTTP endpoint URL template relative to base domain
 *   - `inputSchema`: Zod schema for input parameter validation
 *   - `outputSchema`: Zod schema for output response validation
 *   - `sampleParams`: Optional sample parameters for testing
 *   - `cacheStrategy`: Cache strategy for TanStack Query integration
 *   - `api`: API group name (computed from id)
 *   - `functionName`: Function name (computed from id)
 *   - `urlTemplate`: Complete URL template with domain (computed)
 */
export function defineEndpoint<I, O>(
  definition: EndpointDefinition<I, O>
): Endpoint<I, O> {
  const [api, functionName] = definition.id.split(":");
  const urlTemplate = `${configManager.getDomain()}${definition.endpoint}`;

  return {
    ...definition,
    api,
    functionName,
    urlTemplate,
  };
}

/**
 * Discovers all endpoints from client modules
 *
 * This function uses static imports to access all client modules and extracts
 * endpoint objects from them. All client modules export enriched endpoint
 * objects that are automatically discovered and organized by API group.
 *
 * @returns Object with endpoints grouped by API name, sorted alphabetically
 */
// Import all client modules statically
import * as wsdotBorderCrossings from "@/clients/wsdot-border-crossings";
import * as wsdotBridgeClearances from "@/clients/wsdot-bridge-clearances";
import * as wsdotCommercialVehicleRestrictions from "@/clients/wsdot-commercial-vehicle-restrictions";
import * as wsdotHighwayAlerts from "@/clients/wsdot-highway-alerts";
import * as wsdotHighwayCameras from "@/clients/wsdot-highway-cameras";
import * as wsdotMountainPassConditions from "@/clients/wsdot-mountain-pass-conditions";
import * as wsdotTollRates from "@/clients/wsdot-toll-rates";
import * as wsdotTrafficFlow from "@/clients/wsdot-traffic-flow";
import * as wsdotTravelTimes from "@/clients/wsdot-travel-times";
import * as wsdotWeatherInformation from "@/clients/wsdot-weather-information";
import * as wsdotWeatherInformationExtended from "@/clients/wsdot-weather-information-extended";
import * as wsdotWeatherStations from "@/clients/wsdot-weather-stations";
import * as wsfFares from "@/clients/wsf-fares";
import * as wsfSchedule from "@/clients/wsf-schedule";
import * as wsfTerminals from "@/clients/wsf-terminals";
import * as wsfVessels from "@/clients/wsf-vessels";

export const discoverEndpoints = (): EndpointsByApi => {
  // Use static imports to avoid async complexity
  // Modules are ordered alphabetically by API name for consistent results
  const modules = [
    wsdotBorderCrossings,
    wsdotBridgeClearances,
    wsdotCommercialVehicleRestrictions,
    wsdotHighwayAlerts,
    wsdotHighwayCameras,
    wsdotMountainPassConditions,
    wsdotTollRates,
    wsdotTrafficFlow,
    wsdotTravelTimes,
    wsdotWeatherInformation,
    wsdotWeatherInformationExtended,
    wsdotWeatherStations,
    wsfFares,
    wsfSchedule,
    wsfTerminals,
    wsfVessels,
  ];

  // Create nested structure grouped by API using functional approach
  const endpointsByApi = modules
    .map((module) => Object.values(module).filter(isEndpoint))
    .filter((endpoints) => endpoints.length > 0)
    .reduce((acc, endpoints) => {
      const apiName = endpoints[0].api;
      acc[apiName] = endpoints;
      return acc;
    }, {} as EndpointsByApi);

  return endpointsByApi;
};

/**
 * Gets all endpoints as a flat array
 *
 * This is a convenience function that flattens the nested structure returned
 * by discoverEndpoints() into a single array. Useful when you need to iterate
 * over all endpoints regardless of their API grouping.
 *
 * @returns Array of all endpoints from all APIs
 */
export const getAllEndpoints = (): Endpoints => {
  const endpointsByApi = discoverEndpoints();
  return Object.values(endpointsByApi).flat();
};
