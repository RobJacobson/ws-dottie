import { datesHelper } from "@/shared/utils";
import { createApiDefinition } from "../utils";
import { input, output } from "./schemas";

export const wsfVesselsApi = createApiDefinition("wsf-vessels", [
  {
    function: "cacheFlushDate",
    endpoint: "/ferries/api/vessels/rest/cacheflushdate",
    inputSchema: input.cacheFlushDateSchema,
    outputSchema: output.cacheFlushDateSchema,
    sampleParams: {},
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselAccommodations",
    endpoint: "/ferries/api/vessels/rest/vesselaccommodations",
    inputSchema: input.vesselAccommodationsSchema,
    outputSchema: output.vesselAccommodationsListSchema,
    sampleParams: {},
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselAccommodationsById",
    endpoint: "/ferries/api/vessels/rest/vesselaccommodations/{VesselID}",
    inputSchema: input.vesselAccommodationsByIdSchema,
    outputSchema: output.vesselAccommodationsSchema,
    sampleParams: { VesselID: 65 },
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselBasics",
    endpoint: "/ferries/api/vessels/rest/vesselbasics",
    inputSchema: input.vesselBasicsSchema,
    outputSchema: output.vesselBasicDetailsListSchema,
    sampleParams: {},
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselBasicsById",
    endpoint: "/ferries/api/vessels/rest/vesselbasics/{VesselID}",
    inputSchema: input.vesselBasicsByIdSchema,
    outputSchema: output.vesselBasicSchema,
    sampleParams: { VesselID: 15 },
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselHistories",
    endpoint: "/ferries/api/vessels/rest/vesselhistory",
    inputSchema: input.getAllVesselHistorySchema,
    outputSchema: output.vesselHistoryResponseListSchema,
    sampleParams: {},
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselHistoriesByVesselAndDateRange",
    endpoint:
      "/ferries/api/vessels/rest/vesselhistory/{VesselName}/{DateStart}/{DateEnd}",
    inputSchema: input.getVesselHistorySchema,
    outputSchema: output.vesselHistoryResponseListSchema,
    sampleParams: {
      VesselName: "Cathlamet",
      DateStart: datesHelper.startOfMonth(),
      DateEnd: datesHelper.endOfMonth(),
    },
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselLocations",
    endpoint: "/ferries/api/vessels/rest/vessellocations",
    inputSchema: input.vesselLocationsSchema,
    outputSchema: output.vesselLocationsListSchema,
    sampleParams: {},
    cacheStrategy: "REALTIME",
  },
  {
    function: "vesselLocationsById",
    endpoint: "/ferries/api/vessels/rest/vessellocations/{VesselID}",
    inputSchema: input.vesselLocationsByIdSchema,
    outputSchema: output.vesselLocationsSchema,
    sampleParams: { VesselID: 18 },
    cacheStrategy: "REALTIME",
  },
  {
    function: "vesselStats",
    endpoint: "/ferries/api/vessels/rest/vesselstats",
    inputSchema: input.vesselStatsSchema,
    outputSchema: output.vesselStatsListSchema,
    sampleParams: {},
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselStatsById",
    endpoint: "/ferries/api/vessels/rest/vesselstats/{VesselID}",
    inputSchema: input.vesselStatsByIdSchema,
    outputSchema: output.vesselStatsSchema,
    sampleParams: { VesselID: 32 },
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselsVerbose",
    endpoint: "/ferries/api/vessels/rest/vesselverbose",
    inputSchema: input.vesselVerboseSchema,
    outputSchema: output.vesselVerboseDetailsListSchema,
    sampleParams: {},
    cacheStrategy: "STATIC",
  },
  {
    function: "vesselsVerboseById",
    endpoint: "/ferries/api/vessels/rest/vesselverbose/{VesselID}",
    inputSchema: input.vesselVerboseByIdSchema,
    outputSchema: output.vesselVerboseSchema,
    sampleParams: { VesselID: 68 },
    cacheStrategy: "STATIC",
  },
]);
