import type { ApiDefinition } from "@/apis/types";
import { datesHelper } from "@/shared/utils";
import { input, output } from "./schemas";

export const wsfScheduleApi: ApiDefinition = {
  name: "wsf-schedule",
  baseUrl: "https://www.wsdot.wa.gov/ferries/api/schedule/rest",
  endpoints: [
    {
      function: "activeSeasons",
      endpoint: "/activeseasons",
      inputSchema: input.getActiveScheduledSeasonsSchema,
      outputSchema: output.schedulesListSchema,
      sampleParams: {},
      cacheStrategy: "STATIC",
    },
    {
      function: "allSailings",
      endpoint: "/allsailings/{SchedRouteID}",
      inputSchema: input.getAllSchedSailingsBySchedRouteSchema,
      outputSchema: output.sailingsListSchema,
      sampleParams: { SchedRouteID: 2401 },
      cacheStrategy: "STATIC",
    },
    {
      function: "cacheFlushDate",
      endpoint: "/cacheflushdate",
      inputSchema: input.getValidDateRangeSchema,
      outputSchema: output.cacheFlushDateSchema,
      sampleParams: {},
      cacheStrategy: "STATIC",
    },
    {
      function: "routeDetails",
      endpoint: "/routedetails/{TripDate}",
      inputSchema: input.getRouteDetailsSchema,
      outputSchema: output.routeDetailsListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow() },
      cacheStrategy: "STATIC",
    },
    {
      function: "routeDetailsByRoute",
      endpoint: "/routedetails/{TripDate}/{RouteID}",
      inputSchema: input.getRouteDetailsSchema,
      outputSchema: output.routeDetailSchema,
      sampleParams: { TripDate: datesHelper.tomorrow(), RouteID: 1 },
      cacheStrategy: "STATIC",
    },
    {
      function: "routeDetailsByTerminals",
      endpoint:
        "/routedetails/{TripDate}/{DepartingScheduleTerminalID}/{ArrivingScheduleTerminalID}",
      inputSchema: input.getRouteDetailsSchema,
      outputSchema: output.routeDetailsListSchema,
      sampleParams: {
        TripDate: datesHelper.tomorrow(),
        DepartingScheduleTerminalID: 1,
        ArrivingScheduleTerminalID: 10,
      },
      cacheStrategy: "STATIC",
    },
    {
      function: "routes",
      endpoint: "/routes/{TripDate}",
      inputSchema: input.getRoutesSchema,
      outputSchema: output.routesListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow() },
      cacheStrategy: "STATIC",
    },
    {
      function: "routesByTerminals",
      endpoint: "/routes/{TripDate}/{DepartingTerminalID}/{ArrivingTerminalID}",
      inputSchema: input.getTerminalsSchema,
      outputSchema: output.routesListSchema,
      sampleParams: {
        TripDate: datesHelper.tomorrow(),
        DepartingTerminalID: 1,
        ArrivingTerminalID: 10,
      },
      cacheStrategy: "STATIC",
    },
    {
      function: "routesHavingServiceDisruptions",
      endpoint: "/routeshavingservicedisruptions/{TripDate}",
      inputSchema: input.getRoutesHavingServiceDisruptionsSchema,
      outputSchema: output.serviceDisruptionsListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow() },
      cacheStrategy: "STATIC",
    },
    {
      function: "sailings",
      endpoint: "/sailings/{SchedRouteID}",
      inputSchema: input.getSchedSailingsBySchedRouteSchema,
      outputSchema: output.sailingsListSchema,
      sampleParams: { SchedRouteID: 2401 },
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduleAlerts",
      endpoint: "/alerts",
      inputSchema: input.getAllAlertsSchema,
      outputSchema: output.alertsListSchema,
      sampleParams: {},
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduleByRoute",
      endpoint: "/schedule/{TripDate}/{RouteID}",
      inputSchema: input.getScheduleByRouteSchema,
      outputSchema: output.schedulesListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow(), RouteID: 9 },
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduleByTerminals",
      endpoint:
        "/schedule/{TripDate}/{DepartingScheduleTerminalID}/{ArrivingScheduleTerminalID}",
      inputSchema: input.getScheduleByTerminalComboSchema,
      outputSchema: output.schedulesListSchema,
      sampleParams: {
        TripDate: datesHelper.tomorrow(),
        DepartingScheduleTerminalID: 1,
        ArrivingScheduleTerminalID: 10,
      },
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduledRoutes",
      endpoint: "/schedroutes",
      inputSchema: input.getSchedRoutesSchema,
      outputSchema: output.schedRoutesListSchema,
      sampleParams: {},
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduledRoutesBySeason",
      endpoint: "/schedroutes/{SeasonID}",
      inputSchema: input.getSchedRoutesSchema,
      outputSchema: output.schedRoutesListSchema,
      sampleParams: { SeasonID: 193 },
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduleTodayByRoute",
      endpoint: "/scheduletoday/{RouteID}/{OnlyRemainingTimes}",
      inputSchema: input.getScheduleByRouteSchema,
      outputSchema: output.schedulesListSchema,
      sampleParams: { RouteID: 9, OnlyRemainingTimes: false },
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduleTodayByTerminals",
      endpoint:
        "/scheduletoday/{DepartingScheduleTerminalID}/{ArrivingScheduleTerminalID}/{OnlyRemainingTimes}",
      inputSchema: input.getTodaysScheduleByTerminalComboSchema,
      outputSchema: output.schedulesListSchema,
      sampleParams: {
        DepartingScheduleTerminalID: 1,
        ArrivingScheduleTerminalID: 10,
        OnlyRemainingTimes: false,
      },
      cacheStrategy: "STATIC",
    },
    {
      function: "scheduleValidDateRange",
      endpoint: "/validdaterange",
      inputSchema: input.getValidDateRangeSchema,
      outputSchema: output.validDateRangeSchema,
      sampleParams: {},
      cacheStrategy: "STATIC",
    },
    {
      function: "terminalMates",
      endpoint: "/terminalMates/{TripDate}/{TerminalID}",
      inputSchema: input.getTerminalMatesSchema,
      outputSchema: output.terminalMatesListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow(), TerminalID: 1 },
      cacheStrategy: "STATIC",
    },
    {
      function: "terminals",
      endpoint: "/terminals/{TripDate}",
      inputSchema: input.getTerminalsSchema,
      outputSchema: output.terminalsListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow() },
      cacheStrategy: "STATIC",
    },
    {
      function: "terminalsAndMates",
      endpoint: "/terminalsandmates/{TripDate}",
      inputSchema: input.getTerminalsAndMatesSchema,
      outputSchema: output.terminalMatesListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow() },
      cacheStrategy: "STATIC",
    },
    {
      function: "terminalsAndMatesByRoute",
      endpoint: "/terminalsandmatesbyroute/{TripDate}/{RouteID}",
      inputSchema: input.getTerminalsAndMatesByRouteSchema,
      outputSchema: output.terminalMatesListSchema,
      sampleParams: { TripDate: datesHelper.tomorrow(), RouteID: 9 },
      cacheStrategy: "STATIC",
    },
    {
      function: "timeAdjustments",
      endpoint: "/timeadj",
      inputSchema: input.getTimeAdjSchema,
      outputSchema: output.timeAdjustmentsListSchema,
      sampleParams: {},
      cacheStrategy: "STATIC",
    },
    {
      function: "timeAdjustmentsByRoute",
      endpoint: "/timeadjbyroute/{RouteID}",
      inputSchema: input.getTimeAdjByRouteSchema,
      outputSchema: output.timeAdjustmentsListSchema,
      sampleParams: { RouteID: 1 },
      cacheStrategy: "STATIC",
    },
    {
      function: "timeAdjustmentsBySchedRoute",
      endpoint: "/timeadjbyschedroute/{SchedRouteID}",
      inputSchema: input.getTimeAdjBySchedRouteSchema,
      outputSchema: output.timeAdjustmentsListSchema,
      sampleParams: { SchedRouteID: 2401 },
      cacheStrategy: "STATIC",
    },
  ],
};
