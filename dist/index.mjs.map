{"version":3,"sources":["../src/wsf/shared/fetching/dateUtils.ts","../src/wsf/shared/fetching/config.ts","../src/lib/logger.ts","../src/wsf/shared/fetching/utils.ts","../src/wsf/shared/fetching/fetchInternal.ts","../src/wsf/shared/fetching/fetch.ts","../src/wsf/schedule/routes/api.ts","../../node_modules/@tanstack/query-core/src/subscribable.ts","../../node_modules/@tanstack/query-core/src/utils.ts","../../node_modules/@tanstack/query-core/src/focusManager.ts","../../node_modules/@tanstack/query-core/src/onlineManager.ts","../../node_modules/@tanstack/query-core/src/thenable.ts","../../node_modules/@tanstack/query-core/src/retryer.ts","../../node_modules/@tanstack/query-core/src/notifyManager.ts","../../node_modules/@tanstack/query-core/src/removable.ts","../../node_modules/@tanstack/query-core/src/query.ts","../../node_modules/@tanstack/query-core/src/queryCache.ts","../../node_modules/@tanstack/query-core/src/mutation.ts","../../node_modules/@tanstack/query-core/src/mutationCache.ts","../../node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts","../../node_modules/@tanstack/query-core/src/queryClient.ts","../../node_modules/@tanstack/query-core/src/queryObserver.ts","../../node_modules/@tanstack/query-core/src/hydration.ts","../../node_modules/@tanstack/react-query/src/QueryClientProvider.tsx","../../node_modules/@tanstack/react-query/src/IsRestoringProvider.ts","../../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../../node_modules/@tanstack/react-query/src/suspense.ts","../../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../../node_modules/@tanstack/react-query/src/useQuery.ts","../src/wsf/shared/caching/config.ts","../src/wsf/schedule/routes/hook.ts","../src/wsf/schedule/schedules/api.ts","../src/wsf/schedule/schedules/hook.ts","../src/wsf/schedule/terminals/api.ts","../src/wsf/schedule/terminals/hook.ts","../src/wsf/schedule/vessels/api.ts","../src/wsf/schedule/vessels/hook.ts","../src/wsf/schedule/timeAdjustments/api.ts","../src/wsf/schedule/timeAdjustments/hook.ts","../src/wsf/schedule/validDateRange/api.ts","../src/wsf/schedule/validDateRange/hook.ts","../src/wsf/schedule/cacheFlushDateSchedule/api.ts","../src/wsf/schedule/cacheFlushDateSchedule/hook.ts","../src/wsf/terminals/cacheFlushDateTerminals/api.ts","../src/wsf/terminals/cacheFlushDateTerminals/hook.ts","../src/wsf/terminals/terminalSailingSpace/api.ts","../src/wsf/terminals/terminalSailingSpace/hook.ts","../src/wsf/terminals/terminalverbose/api.ts","../src/wsf/terminals/terminalverbose/hook.ts","../src/wsf/vessels/cacheFlushDateVessels/api.ts","../src/wsf/vessels/cacheFlushDateVessels/hook.ts","../src/wsf/vessels/vesselLocations/api.ts","../src/wsf/vessels/vesselLocations/hook.ts","../src/wsf/vessels/vesselVerbose/api.ts","../src/wsf/vessels/vesselVerbose/hook.ts","../src/wsf/shared/caching/CacheProvider.tsx","../src/wsf/shared/caching/invalidation.ts","../../node_modules/@tanstack/query-persist-client-core/src/persist.ts","../../node_modules/@tanstack/query-sync-storage-persister/src/utils.ts","../../node_modules/@tanstack/query-sync-storage-persister/src/index.ts","../src/wsf/shared/caching/persistence.ts"],"sourcesContent":["// Date utilities for WSF Schedule API\n\n/**\n * Converts a JavaScript Date to WSF API date format (MM/DD/YYYY)\n */\nexport const dateToWsfFormat = (date: Date): string => {\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const year = date.getFullYear();\n  return `${month}/${day}/${year}`;\n};\n\n/**\n * Converts a JavaScript Date to WSF API path parameter format (YYYY-MM-DD)\n */\nexport const dateToWsfPathFormat = (date: Date): string => {\n  return date.toISOString().split(\"T\")[0]; // YYYY-MM-DD format\n};\n\n/**\n * Builds a WSF API URL with parameter substitution\n *\n * @param template - URL template with placeholders like \"/routes/{tripDate}/{routeId}\"\n * @param params - Parameters to substitute (supports string, number, Date, and boolean values)\n * @returns The substituted URL\n */\nexport const buildWsfUrl = (\n  template: string,\n  params: Record<string, string | number | Date | boolean> = {}\n): string => {\n  let url = template;\n\n  // Substitute provided parameters\n  for (const [key, value] of Object.entries(params)) {\n    const placeholder = `{${key}}`;\n    if (url.includes(placeholder)) {\n      // Convert Date objects to WSF path format, otherwise convert to string\n      const stringValue =\n        value instanceof Date ? dateToWsfPathFormat(value) : String(value);\n      url = url.replace(placeholder, stringValue);\n    }\n  }\n\n  return url;\n};\n\n/**\n * Converts a JavaScript Date to WSF API time format (HH:MM AM/PM)\n */\nexport const dateToWsfTimeFormat = (date: Date): string => {\n  const hours = date.getHours();\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  const ampm = hours >= 12 ? \"PM\" : \"AM\";\n  const displayHours = hours % 12 || 12;\n  return `${displayHours}:${minutes} ${ampm}`;\n};\n\n/**\n * Converts a JavaScript Date to WSF API datetime format (MM/DD/YYYY HH:MM AM/PM)\n */\nexport const dateToWsfDateTimeFormat = (date: Date): string => {\n  return `${dateToWsfFormat(date)} ${dateToWsfTimeFormat(date)}`;\n};\n\n/**\n * Parses WSF API date format (MM/DD/YYYY) to JavaScript Date\n */\nexport const parseWsfScheduleDate = (dateString: string): Date => {\n  const [month, day, year] = dateString.split(\"/\").map(Number);\n  return new Date(year, month - 1, day);\n};\n\n/**\n * Parses WSF API time format (HH:MM AM/PM) to JavaScript Date (today's date)\n */\nexport const parseWsfTime = (timeString: string): Date => {\n  const [time, ampm] = timeString.split(\" \");\n  const [hours, minutes] = time.split(\":\").map(Number);\n\n  const date = new Date();\n  date.setHours(\n    ampm === \"PM\" && hours !== 12\n      ? hours + 12\n      : hours === 12 && ampm === \"AM\"\n        ? 0\n        : hours\n  );\n  date.setMinutes(minutes);\n  date.setSeconds(0);\n  date.setMilliseconds(0);\n\n  return date;\n};\n\n/**\n * Parses WSF API datetime format (MM/DD/YYYY HH:MM AM/PM) to JavaScript Date\n */\nexport const parseWsfDateTime = (dateTimeString: string): Date => {\n  const [datePart, timePart] = dateTimeString.split(\" \");\n  const date = parseWsfScheduleDate(datePart);\n  const time = parseWsfTime(\n    `${timePart} ${dateTimeString.split(\" \").pop() || \"\"}`\n  );\n\n  date.setHours(time.getHours());\n  date.setMinutes(time.getMinutes());\n  date.setSeconds(0);\n  date.setMilliseconds(0);\n\n  return date;\n};\n\n/**\n * Gets today's date in WSF format\n */\nexport const getTodayWsfFormat = (): string => {\n  return dateToWsfFormat(new Date());\n};\n\n/**\n * Gets tomorrow's date in WSF format\n */\nexport const getTomorrowWsfFormat = (): string => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  return dateToWsfFormat(tomorrow);\n};\n\n/**\n * Checks if a date is today\n */\nexport const isToday = (date: Date): boolean => {\n  const today = new Date();\n  return (\n    date.getDate() === today.getDate() &&\n    date.getMonth() === today.getMonth() &&\n    date.getFullYear() === today.getFullYear()\n  );\n};\n\n/**\n * Checks if a date is tomorrow\n */\nexport const isTomorrow = (date: Date): boolean => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  return (\n    date.getDate() === tomorrow.getDate() &&\n    date.getMonth() === tomorrow.getMonth() &&\n    date.getFullYear() === tomorrow.getFullYear()\n  );\n};\n\n/**\n * Gets a human-readable date label (Today, Tomorrow, or formatted date)\n */\nexport const getDateLabel = (date: Date): string => {\n  if (isToday(date)) return \"Today\";\n  if (isTomorrow(date)) return \"Tomorrow\";\n  return dateToWsfFormat(date);\n};\n","// WSF API configuration\n\n/**\n * Base URLs for WSF API sources\n */\nexport const API_BASES = {\n  vessels: \"https://www.wsdot.wa.gov/ferries/api/vessels/rest\",\n  terminals: \"https://www.wsdot.wa.gov/ferries/api/terminals/rest\",\n  schedule: \"https://www.wsdot.wa.gov/ferries/api/schedule/rest\",\n} as const;\n\n/**\n * API access token for WSF API authentication\n * Retrieved from environment variable EXPO_PUBLIC_WSDOT_ACCESS_TOKEN\n */\nexport const API_KEY = process.env.EXPO_PUBLIC_WSDOT_ACCESS_TOKEN || \"\";\n\n// API source types\nexport type WsfSource = \"vessels\" | \"terminals\" | \"schedule\";\n\n// Logging modes\nexport type LoggingMode = \"none\" | \"info\" | \"debug\";\n","// Simple logger for the WSDOT API client library\n\nconst log = {\n  debug: (...args: unknown[]) => {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n      console.debug('[WSF Debug]', ...args);\n    }\n  },\n  info: (...args: unknown[]) => {\n    console.info('[WSF Info]', ...args);\n  },\n  warn: (...args: unknown[]) => {\n    console.warn('[WSF Warn]', ...args);\n  },\n  error: (...args: unknown[]) => {\n    console.error('[WSF Error]', ...args);\n  },\n};\n\nexport default log; ","// WSF shared utilities\n\n/**\n * Type representing JSON-like data that can be transformed\n */\nexport type JsonValue =\n  | string\n  | number\n  | boolean\n  | null\n  | JsonValue[]\n  | { [key: string]: JsonValue };\n\n/**\n * Type representing transformed data (with Date objects and camelCase keys)\n */\nexport type JsonX =\n  | string\n  | number\n  | boolean\n  | null\n  | Date\n  | JsonX[]\n  | { [key: string]: JsonX };\n\n/**\n * Generic type for transformed JSON objects\n */\nexport type TransformedJson = { [key: string]: JsonX };\n\n/**\n * Generic type for transformed JSON arrays\n */\nexport type TransformedJsonArray = JsonX[];\n\n/**\n * Checks if a string matches YYYY-MM-DD date format\n */\nconst isYyyyMmDdDate = (str: string): boolean => {\n  const yyyyMmDdRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!yyyyMmDdRegex.test(str)) return false;\n\n  // Validate the date is actually valid\n  const date = new Date(str);\n  return (\n    !Number.isNaN(date.getTime()) && date.toISOString().split(\"T\")[0] === str\n  );\n};\n\n/**\n * Checks if a string matches ISO datetime format (YYYY-MM-DDTHH:mm:ss)\n */\nconst isIsoDateTime = (str: string): boolean => {\n  const isoDateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/;\n  if (!isoDateTimeRegex.test(str)) return false;\n\n  // Validate the date is actually valid\n  const date = new Date(str);\n  return !Number.isNaN(date.getTime());\n};\n\n/**\n * Checks if a string matches MM/DD/YYYY date format\n */\nconst isMmDdYyyyDate = (str: string): boolean => {\n  const mmDdYyyyRegex = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\n  if (!mmDdYyyyRegex.test(str)) return false;\n\n  // Validate the date is actually valid\n  const [month, day, year] = str.split(\"/\").map(Number);\n  const date = new Date(year, month - 1, day);\n  return (\n    !Number.isNaN(date.getTime()) &&\n    date.getMonth() === month - 1 &&\n    date.getDate() === day &&\n    date.getFullYear() === year\n  );\n};\n\n/**\n * Converts a string to a Date object based on its format\n */\nconst parseDateString = (dateString: string): Date | null => {\n  // Handle WSF /Date(timestamp)/ format\n  if (dateString.startsWith(\"/Date(\")) {\n    const middle = dateString.slice(6, 19);\n    const timestamp = parseInt(middle);\n    return new Date(timestamp);\n  }\n\n  // Handle ISO datetime format (YYYY-MM-DDTHH:mm:ss)\n  if (isIsoDateTime(dateString)) {\n    return new Date(dateString);\n  }\n\n  // Handle YYYY-MM-DD format\n  if (isYyyyMmDdDate(dateString)) {\n    return new Date(dateString);\n  }\n\n  // Handle MM/DD/YYYY format\n  if (isMmDdYyyyDate(dateString)) {\n    const [month, day, year] = dateString.split(\"/\").map(Number);\n    return new Date(year, month - 1, day);\n  }\n\n  return null;\n};\n\n/**\n * Recursively transforms WSF API response data:\n * 1. Converts WSF date strings to JavaScript Date objects\n * 2. Converts PascalCase keys to camelCase\n * 3. Handles nested objects and arrays\n */\nexport const transformWsfData = (data: JsonValue): JsonX => {\n  // Handle null input\n  if (data === null) {\n    return null;\n  }\n\n  // Handle arrays\n  if (Array.isArray(data)) {\n    return data.map(transformWsfData);\n  }\n\n  // Handle objects (but not Date objects, which are also typeof 'object')\n  if (typeof data === \"object\" && data.constructor === Object) {\n    const result: { [key: string]: JsonX } = {};\n    for (const [key, value] of Object.entries(data)) {\n      const camelKey = key.charAt(0).toLowerCase() + key.slice(1);\n      result[camelKey] = transformWsfData(value);\n    }\n    return result;\n  }\n\n  // Handle date strings\n  if (typeof data === \"string\") {\n    const parsedDate = parseDateString(data);\n    if (parsedDate) {\n      return parsedDate;\n    }\n  }\n\n  // Return primitives as-is\n  return data;\n};\n","// Internal fetch function for WSF API\n\nimport log from \"../../../lib/logger\";\n\nimport type { LoggingMode } from \"./config\";\nimport { type JsonValue, transformWsfData } from \"./utils\";\n\n// Constants for JSONP request configuration\nconst JSONP_TIMEOUT_MS = 30_000; // 30 seconds\n\n// JSONP callback types for web CORS workaround\ntype JSONPCallback = (data: unknown) => void;\ntype JSONPWindow = Window & Record<string, JSONPCallback | undefined>;\n\n/**\n * Detect if we're in a Node.js environment\n */\nconst isNodeEnvironment = () => {\n  return (\n    typeof process !== \"undefined\" && process.versions && process.versions.node\n  );\n};\n\n/**\n * Detect if we're in a web browser environment\n */\nconst isWebEnvironment = () => {\n  return typeof window !== \"undefined\" && typeof document !== \"undefined\";\n};\n\n/**\n * Internal fetch function with platform-specific implementation and WSF data transformation\n */\nexport const fetchInternal = async <T>(\n  url: string,\n  endpoint: string,\n  logMode?: LoggingMode\n): Promise<T | null> => {\n  try {\n    let response: JsonValue;\n\n    // Use environment-specific fetch method\n    if (isNodeEnvironment()) {\n      // Use native fetch in Node.js environment (for testing)\n      response = (await fetchNative(url)) as JsonValue;\n    } else if (isWebEnvironment()) {\n      // Use JSONP on web to avoid CORS issues\n      response = (await fetchJsonp(url)) as JsonValue;\n    } else {\n      // Use native fetch on mobile platforms (React Native)\n      response = (await fetchNative(url)) as JsonValue;\n    }\n\n    // Apply WSF data transformation recursively\n    const transformedResponse = transformWsfData(response) as T;\n\n    if (logMode === \"debug\") {\n      log.debug(`[WSF ${endpoint}] Response transformed:`, transformedResponse);\n    }\n\n    return transformedResponse;\n  } catch (error) {\n    if (logMode === \"debug\" || logMode === \"info\") {\n      log.error(`[WSF ${endpoint}] Fetch failed:`, error);\n    }\n    return null;\n  }\n};\n\n// Helper functions\n\n// Generate unique JSONP callback name to avoid conflicts\nconst generateCallbackName = () =>\n  `jsonp_${Date.now()}_${Math.random().toString(36).slice(2, 9)}`;\n\n/**\n * Web JSONP fetch (bypasses CORS restrictions) - returns parsed data directly\n */\nconst fetchJsonp = (url: string): Promise<unknown> => {\n  log.debug(\"fetchJsonp\", url);\n  return new Promise((resolve, reject) => {\n    const callbackName = generateCallbackName();\n    const script = document.createElement(\"script\");\n    const jsonpWindow = window as unknown as JSONPWindow;\n\n    // Cleanup DOM and callback references\n    const cleanup = () => {\n      if (script.parentNode) document.head.removeChild(script);\n      if (jsonpWindow[callbackName]) delete jsonpWindow[callbackName];\n    };\n\n    // Cleanup with timeout clearing\n    const cleanupWithTimeout = () => {\n      clearTimeout(timeoutId);\n      cleanup();\n    };\n\n    // Prevent hanging requests\n    const timeoutId = setTimeout(() => {\n      cleanup();\n      reject(new Error(\"JSONP request timeout\"));\n    }, JSONP_TIMEOUT_MS);\n\n    // Success callback - WSF API calls this with data\n    jsonpWindow[callbackName] = (data: unknown) => {\n      cleanupWithTimeout();\n      resolve(data);\n    };\n\n    // Handle script loading errors\n    script.onerror = () => {\n      cleanupWithTimeout();\n      reject(new Error(\"JSONP script load failed\"));\n    };\n\n    // Build callback URL and inject script\n    script.src = `${url}${url.includes(\"?\") ? \"&\" : \"?\"}callback=${callbackName}`;\n    document.head.appendChild(script);\n  });\n};\n\n/**\n * Native fetch for mobile platforms - returns parsed data directly\n */\nconst fetchNative = async (url: string): Promise<unknown> => {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","// WSF fetch utilities\n\nimport { API_BASES, API_KEY, type LoggingMode, type WsfSource } from \"./config\";\nimport { fetchInternal } from \"./fetchInternal\";\n\n/**\n * Fetches data from WSF API with a complete URL\n *\n * @param source - The API source: \"vessels\", \"terminals\", or \"schedule\"\n * @param endpoint - The complete API endpoint path (e.g., \"/vessellocations/123\")\n * @param logMode - Optional logging mode for debugging\n * @returns Promise resolving to the API response or null if fetch fails\n */\nexport const fetchWsf = async <T>(\n  source: WsfSource,\n  endpoint: string,\n  logMode?: LoggingMode\n): Promise<T | null> => {\n  const baseUrl = API_BASES[source];\n  const url = `${baseUrl}${endpoint}?api_key=${API_KEY}`;\n  return await fetchInternal<T>(url, endpoint, logMode);\n};\n\n/**\n * Fetches array data from WSF API with a complete URL\n *\n * @param source - The API source: \"vessels\", \"terminals\", or \"schedule\"\n * @param endpoint - The complete API endpoint path (e.g., \"/vessellocations\")\n * @param logMode - Optional logging mode for debugging\n * @returns Promise resolving to an array of API responses or empty array if fetch fails\n */\nexport const fetchWsfArray = async <T>(\n  source: WsfSource,\n  endpoint: string,\n  logMode?: LoggingMode\n): Promise<T[]> => (await fetchWsf<T[]>(source, endpoint, logMode)) || [];\n","// Schedule Routes API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { Route } from \"../types\";\n\n// Main API functions\n/**\n * API function for fetching all routes from WSF Schedule API\n *\n * Retrieves the most basic/brief information pertaining to routes for a given trip date.\n * If only a trip date is included, all routes available for that date of travel are returned.\n * Valid trip dates may be determined using the validDateRange endpoint.\n *\n * @param tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @returns Promise resolving to an array of Route objects containing basic route information\n */\nexport const getRoutes = (tripDate: Date): Promise<Route[]> =>\n  fetchWsfArray<Route>(\n    \"schedule\",\n    buildWsfUrl(\"/routes/{tripDate}\", { tripDate })\n  );\n\n/**\n * API function for fetching routes between specific terminals from WSF Schedule API\n *\n * Retrieves the most basic/brief information pertaining to routes filtered by departing\n * and arriving terminals for a given trip date. Routes in the resultset are filtered\n * to match the specified terminal combination. Valid departing and arriving terminals\n * may be found using the terminalsAndMates endpoint.\n *\n * @param params - Object containing trip date and terminal information\n * @param params.tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @param params.departingTerminalId - The unique identifier for the departing terminal\n * @param params.arrivingTerminalId - The unique identifier for the arriving terminal\n * @returns Promise resolving to an array of Route objects filtered by terminal combination\n */\nexport const getRoutesByTerminals = (params: {\n  tripDate: Date;\n  departingTerminalId: number;\n  arrivingTerminalId: number;\n}): Promise<Route[]> =>\n  fetchWsfArray<Route>(\n    \"schedule\",\n    buildWsfUrl(\n      \"/routes/{tripDate}/{departingTerminalId}/{arrivingTerminalId}\",\n      params\n    )\n  );\n\n/**\n * API function for fetching routes with service disruptions from WSF Schedule API\n *\n * Retrieves the most basic/brief information for routes currently associated with\n * service disruptions for a given trip date. This endpoint helps identify routes\n * that may have delays, cancellations, or other service issues.\n *\n * @param tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @returns Promise resolving to an array of Route objects that have service disruptions\n */\nexport const getRoutesWithDisruptions = (tripDate: Date): Promise<Route[]> =>\n  fetchWsfArray<Route>(\n    \"schedule\",\n    buildWsfUrl(\"/routeshavingservicedisruptions/{tripDate}\", { tripDate })\n  );\n\n/**\n * API function for fetching detailed route information from WSF Schedule API\n *\n * Retrieves highly detailed information pertaining to routes for a given trip date.\n * If only a trip date is included, all routes available for that date of travel are returned.\n * This endpoint provides comprehensive route details including sailing times, vessel assignments,\n * and operational information.\n *\n * @param tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @returns Promise resolving to an array of Route objects containing detailed route information\n */\nexport const getRouteDetails = (tripDate: Date): Promise<Route[]> =>\n  fetchWsfArray<Route>(\n    \"schedule\",\n    buildWsfUrl(\"/routedetails/{tripDate}\", { tripDate })\n  );\n\n/**\n * API function for fetching detailed route information between specific terminals from WSF Schedule API\n *\n * Retrieves highly detailed information pertaining to routes filtered by departing and\n * arriving terminals for a given trip date. Routes in the resultset are filtered to match\n * the specified terminal combination. Valid departing and arriving terminals may be found\n * using the terminalsAndMates endpoint.\n *\n * @param params - Object containing trip date and terminal information\n * @param params.tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @param params.departingTerminalId - The unique identifier for the departing terminal\n * @param params.arrivingTerminalId - The unique identifier for the arriving terminal\n * @returns Promise resolving to an array of Route objects with detailed information filtered by terminal combination\n */\nexport const getRouteDetailsByTerminals = (params: {\n  tripDate: Date;\n  departingTerminalId: number;\n  arrivingTerminalId: number;\n}): Promise<Route[]> =>\n  fetchWsfArray<Route>(\n    \"schedule\",\n    buildWsfUrl(\n      \"/routedetails/{tripDate}/{departingTerminalId}/{arrivingTerminalId}\",\n      params\n    )\n  );\n\n/**\n * API function for fetching detailed route information by route ID from WSF Schedule API\n *\n * Retrieves highly detailed information for a specific route identified by route ID\n * for a given trip date. This endpoint filters the resultset to a single route,\n * providing comprehensive details for that specific route.\n *\n * @param params - Object containing trip date and route information\n * @param params.tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @param params.routeId - The unique identifier for the route\n * @returns Promise resolving to an array of Route objects containing detailed information for the specified route\n */\nexport const getRouteDetailsByRoute = (params: {\n  tripDate: Date;\n  routeId: number;\n}): Promise<Route[]> =>\n  fetchWsfArray<Route>(\n    \"schedule\",\n    buildWsfUrl(\"/routedetails/{tripDate}/{routeId}\", params)\n  );\n\n/**\n * API function for fetching scheduled routes from WSF Schedule API\n *\n * Provides a listing of routes that are active for a season. Results include all known\n * scheduled routes spanning current and upcoming seasons. For example, \"Anacortes / Sidney B.C.\"\n * may be a valid route, but if it's not scheduled to run during a specific season,\n * it won't be returned as part of that season's scheduled routes resultset.\n *\n * @returns Promise resolving to an array of Route objects representing all scheduled routes\n */\nexport const getScheduledRoutes = (): Promise<Route[]> =>\n  fetchWsfArray<Route>(\"schedule\", \"/schedroutes\");\n\n/**\n * API function for fetching scheduled routes by season from WSF Schedule API\n *\n * Provides a listing of routes that are active for a specific season identified by schedule ID.\n * Results are filtered to only include scheduled routes for the specified season.\n * Seasons may be determined using the activeSeasons endpoint.\n *\n * @param seasonId - The unique identifier for the season (schedule ID)\n * @returns Promise resolving to an array of Route objects representing scheduled routes for the specified season\n */\nexport const getScheduledRoutesBySeason = (\n  seasonId: number\n): Promise<Route[]> =>\n  fetchWsfArray<Route>(\n    \"schedule\",\n    buildWsfUrl(\"/schedroutes/{seasonId}\", { seasonId })\n  );\n\n/**\n * API function for fetching active seasons from WSF Schedule API\n *\n * Retrieves a summary of active seasons. This endpoint provides information about\n * current and upcoming ferry service seasons, which can be used to determine\n * valid schedule IDs for other endpoints.\n *\n * @returns Promise resolving to an array of Route objects containing active season information\n */\nexport const getActiveSeasons = (): Promise<Route[]> =>\n  fetchWsfArray<Route>(\"schedule\", \"/activeseasons\");\n\n/**\n * API function for fetching alerts from WSF Schedule API\n *\n * Provides alert information tailored for routes, bulletins, service disruptions, etc.\n * This endpoint returns important notifications and updates that may affect ferry service,\n * including weather-related delays, maintenance notices, and other operational alerts.\n *\n * @returns Promise resolving to an array of Route objects containing alert information\n */\nexport const getAlerts = (): Promise<Route[]> =>\n  fetchWsfArray<Route>(\"schedule\", \"/alerts\");\n","export class Subscribable<TListener extends Function> {\n  protected listeners = new Set<TListener>()\n\n  constructor() {\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.add(listener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type {\n  DefaultError,\n  Enabled,\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n  StaleTime,\n  StaleTimeFunction,\n} from './types'\nimport type { Mutation } from './mutation'\nimport type { FetchOptions, Query } from './query'\n\n// TYPES\n\nexport interface QueryFilters<TQueryKey extends QueryKey = QueryKey> {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: TQueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (\n    mutation: Mutation<TData, TError, TVariables, TContext>,\n  ) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in globalThis\n\nexport function noop(): void\nexport function noop(): undefined\nexport function noop() {}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime:\n    | undefined\n    | StaleTimeFunction<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): StaleTime | undefined {\n  return typeof staleTime === 'function' ? staleTime(query) : staleTime\n}\n\nexport function resolveEnabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  enabled: undefined | Enabled<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): boolean | undefined {\n  return typeof enabled === 'function' ? enabled(query) : enabled\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: Pick<QueryOptions<any, any, any, any>, 'queryKeyHashFn'>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aItems = array ? a : Object.keys(a)\n    const aSize = aItems.length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n    const aItemsSet = new Set(aItems)\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      if (\n        ((!array && aItemsSet.has(key)) || array) &&\n        a[key] === undefined &&\n        b[key] === undefined\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key])\n        if (copy[key] === a[key] && a[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects.\n */\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\n// eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (ctor === undefined) {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Handles Objects created by Object.create(<arbitrary prototype>)\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data) as TData\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        return replaceEqualDeep(prevData, data)\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`,\n        )\n\n        // Prevent the replaceEqualDeep from being called again down below.\n        throw error\n      }\n    }\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n\nexport const skipToken = Symbol()\nexport type SkipToken = typeof skipToken\n\nexport function ensureQueryFn<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: {\n    queryFn?: QueryFunction<TQueryFnData, TQueryKey> | SkipToken\n    queryHash?: string\n  },\n  fetchOptions?: FetchOptions<TQueryFnData>,\n): QueryFunction<TQueryFnData, TQueryKey> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`,\n      )\n    }\n  }\n\n  // if we attempt to retry a fetch that was triggered from an initialPromise\n  // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise\n  // if an observer has already mounted, we will be able to retry with that queryFn\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise!\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () =>\n      Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))\n  }\n\n  return options.queryFn\n}\n\nexport function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwOnError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwOnError function to override throwing behavior on a per-error basis\n  if (typeof throwOnError === 'function') {\n    return throwOnError(...params)\n  }\n\n  return !!throwOnError\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","/**\n * Thenable types which matches React's types for promises\n *\n * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises\n *\n * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138\n * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227\n */\n\nimport { noop } from './utils'\n\ninterface Fulfilled<T> {\n  status: 'fulfilled'\n  value: T\n}\ninterface Rejected {\n  status: 'rejected'\n  reason: unknown\n}\ninterface Pending<T> {\n  status: 'pending'\n\n  /**\n   * Resolve the promise with a value.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  resolve: (value: T) => void\n  /**\n   * Reject the promise with a reason.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  reject: (reason: unknown) => void\n}\n\nexport type FulfilledThenable<T> = Promise<T> & Fulfilled<T>\nexport type RejectedThenable<T> = Promise<T> & Rejected\nexport type PendingThenable<T> = Promise<T> & Pending<T>\n\nexport type Thenable<T> =\n  | FulfilledThenable<T>\n  | RejectedThenable<T>\n  | PendingThenable<T>\n\nexport function pendingThenable<T>(): PendingThenable<T> {\n  let resolve: Pending<T>['resolve']\n  let reject: Pending<T>['reject']\n  // this could use `Promise.withResolvers()` in the future\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  }) as PendingThenable<T>\n\n  thenable.status = 'pending'\n  thenable.catch(() => {\n    // prevent unhandled rejection errors\n  })\n\n  function finalize(data: Fulfilled<T> | Rejected) {\n    Object.assign(thenable, data)\n\n    // clear pending props props to avoid calling them twice\n    delete (thenable as Partial<PendingThenable<T>>).resolve\n    delete (thenable as Partial<PendingThenable<T>>).reject\n  }\n\n  thenable.resolve = (value) => {\n    finalize({\n      status: 'fulfilled',\n      value,\n    })\n\n    resolve(value)\n  }\n  thenable.reject = (reason) => {\n    finalize({\n      status: 'rejected',\n      reason,\n    })\n\n    reject(reason)\n  }\n\n  return thenable\n}\n\n/**\n * This function takes a Promise-like input and detects whether the data\n * is synchronously available or not.\n *\n * It does not inspect .status, .value or .reason properties of the promise,\n * as those are not always available, and the .status of React's promises\n * should not be considered part of the public API.\n */\nexport function tryResolveSync(promise: Promise<unknown> | Thenable<unknown>) {\n  let data: unknown\n\n  promise\n    .then((result) => {\n      data = result\n      return result\n    }, noop)\n    // .catch can be unavailable on certain kinds of thenable's\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    ?.catch(noop)\n\n  if (data !== undefined) {\n    return { data }\n  }\n\n  return undefined\n}\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { pendingThenable } from './thenable'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  initialPromise?: Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError extends Error {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    super('CancelledError')\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n\n  const thenable = pendingThenable<TData>()\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      thenable.resolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      thenable.reject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // we can re-use config.initialPromise on the first call of run()\n    const initialPromise =\n      failureCount === 0 ? config.initialPromise : undefined\n\n    // Execute query\n    try {\n      promiseOrValue = initialPromise ?? config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return thenable\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return thenable\n    },\n  }\n}\n","// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport const defaultScheduler: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn = defaultScheduler\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  gcTime!: number\n  #gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.gcTime)\n    }\n  }\n\n  protected updateGcTime(newGcTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no gcTime is set\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout)\n      this.#gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n  StaleTime,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStatic(): boolean {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) =>\n          resolveStaleTime(observer.options.staleTime, this) === 'static',\n      )\n    }\n\n    return false\n  }\n\n  isStale(): boolean {\n    // check observers first, their `isStale` has the source of truth\n    // calculated with `isStaleByTime` and it takes `enabled` into account\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined || this.state.isInvalidated\n  }\n\n  isStaleByTime(staleTime: StaleTime = 0): boolean {\n    // no data is always stale\n    if (this.state.data === undefined) {\n      return true\n    }\n    // static is never stale\n    if (staleTime === 'static') {\n      return false\n    }\n    // if the query is invalidated, it is stale\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    return !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const createQueryFnContext = (): QueryFunctionContext<TQueryKey> => {\n        const queryFnContext: OmitKeyof<\n          QueryFunctionContext<TQueryKey>,\n          'signal'\n        > = {\n          client: this.#client,\n          queryKey: this.queryKey,\n          meta: this.meta,\n        }\n        addSignalProperty(queryFnContext)\n        return queryFnContext as QueryFunctionContext<TQueryKey>\n      }\n\n      const queryFnContext = createQueryFnContext()\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const createFetchContext = (): FetchContext<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey\n    > => {\n      const context: OmitKeyof<\n        FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n        'signal'\n      > = {\n        fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        client: this.#client,\n        state: this.state,\n        fetchFn,\n      }\n\n      addSignalProperty(context)\n      return context as FetchContext<TQueryFnData, TError, TData, TQueryKey>\n    }\n\n    const context = createFetchContext()\n\n    this.options.behavior?.onFetch(context, this as unknown as Query)\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          // If fetching ends successfully, we don't need revertState as a fallback anymore.\n          this.#revertState = undefined\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n","import { hashQueryKeyByOptions, matchQuery } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type {\n  DefaultError,\n  NotifyEvent,\n  QueryKey,\n  QueryOptions,\n  WithRequired,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (\n    error: DefaultError,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\nexport interface QueryStore {\n  has: (queryHash: string) => boolean\n  set: (queryHash: string, query: Query) => void\n  get: (queryHash: string) => Query | undefined\n  delete: (queryHash: string) => void\n  values: () => IterableIterator<Query>\n}\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  #queries: QueryStore\n\n  constructor(public config: QueryCacheConfig = {}) {\n    super()\n    this.#queries = new Map<string, Query>()\n  }\n\n  build<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    client: QueryClient,\n    options: WithRequired<\n      QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        client,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query)\n\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.#queries.get(query.queryHash)\n\n    if (queryInMap) {\n      query.destroy()\n\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash)\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.#queries.get(queryHash) as\n      | Query<TQueryFnData, TError, TData, TQueryKey>\n      | undefined\n  }\n\n  getAll(): Array<Query> {\n    return [...this.#queries.values()]\n  }\n\n  find<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData>(\n    filters: WithRequired<QueryFilters, 'queryKey'>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((query) =>\n      matchQuery(defaultedFilters, query),\n    ) as Query<TQueryFnData, TError, TData> | undefined\n  }\n\n  findAll(filters: QueryFilters<any> = {}): Array<Query> {\n    const queries = this.getAll()\n    return Object.keys(filters).length > 0\n      ? queries.filter((query) => matchQuery(filters, query))\n      : queries\n  }\n\n  notify(event: QueryCacheNotifyEvent): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const onContinue = () => {\n      this.#dispatch({ type: 'continue' })\n    }\n\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (restored) {\n        // Dispatch continue action to unpause restored mutation\n        onContinue()\n      } else {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Set<Mutation<any, any, any, any>>\n  #scopes: Map<string, Array<Mutation<any, any, any, any>>>\n  #mutationId: number\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = new Set()\n    this.#scopes = new Map()\n    this.#mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations.add(mutation)\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const scopedMutations = this.#scopes.get(scope)\n      if (scopedMutations) {\n        scopedMutations.push(mutation)\n      } else {\n        this.#scopes.set(scope, [mutation])\n      }\n    }\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    if (this.#mutations.delete(mutation)) {\n      const scope = scopeFor(mutation)\n      if (typeof scope === 'string') {\n        const scopedMutations = this.#scopes.get(scope)\n        if (scopedMutations) {\n          if (scopedMutations.length > 1) {\n            const index = scopedMutations.indexOf(mutation)\n            if (index !== -1) {\n              scopedMutations.splice(index, 1)\n            }\n          } else if (scopedMutations[0] === mutation) {\n            this.#scopes.delete(scope)\n          }\n        }\n      }\n    }\n\n    // Currently we notify the removal even if the mutation was already removed.\n    // Consider making this an error or not notifying of the removal depending on the desired semantics.\n    this.notify({ type: 'removed', mutation })\n  }\n\n  canRun(mutation: Mutation<any, any, any, any>): boolean {\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const mutationsWithSameScope = this.#scopes.get(scope)\n      const firstPendingMutation = mutationsWithSameScope?.find(\n        (m) => m.state.status === 'pending',\n      )\n      // we can run if there is no current pending mutation (start use-case)\n      // or if WE are the first pending mutation (continue use-case)\n      return !firstPendingMutation || firstPendingMutation === mutation\n    } else {\n      // For unscoped mutations there are never any pending mutations in front of the\n      // current mutation\n      return true\n    }\n  }\n\n  runNext(mutation: Mutation<any, any, any, any>): Promise<unknown> {\n    const scope = scopeFor(mutation)\n    if (typeof scope === 'string') {\n      const foundMutation = this.#scopes\n        .get(scope)\n        ?.find((m) => m !== mutation && m.state.isPaused)\n\n      return foundMutation?.continue() ?? Promise.resolve()\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.notify({ type: 'removed', mutation })\n      })\n      this.#mutations.clear()\n      this.#scopes.clear()\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return Array.from(this.#mutations)\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    ) as Mutation<TData, TError, TVariables, TContext> | undefined\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused)\n\n    return notifyManager.batch(() =>\n      Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop)),\n      ),\n    )\n  }\n}\n\nfunction scopeFor(mutation: Mutation<any, any, any, any>) {\n  return mutation.options.scope?.id\n}\n","import { addToEnd, addToStart, ensureQueryFn } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options as InfiniteQueryPageParamsOptions<TData>\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction\n      const oldPages = context.state.data?.pages || []\n      const oldPageParams = context.state.data?.pageParams || []\n      let result: InfiniteData<unknown> = { pages: [], pageParams: [] }\n      let currentPage = 0\n\n      const fetchFn = async () => {\n        let cancelled = false\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions)\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const createQueryFnContext = () => {\n            const queryFnContext: OmitKeyof<\n              QueryFunctionContext<QueryKey, unknown>,\n              'signal'\n            > = {\n              client: context.client,\n              queryKey: context.queryKey,\n              pageParam: param,\n              direction: previous ? 'backward' : 'forward',\n              meta: context.options.meta,\n            }\n            addSignalProperty(queryFnContext)\n            return queryFnContext as QueryFunctionContext<QueryKey, unknown>\n          }\n\n          const queryFnContext = createQueryFnContext()\n\n          const page = await queryFn(queryFnContext)\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch all pages\n          do {\n            const param =\n              currentPage === 0\n                ? (oldPageParams[0] ?? options.initialPageParam)\n                : getNextPageParam(options, result)\n            if (currentPage > 0 && param == null) {\n              break\n            }\n            result = await fetchPage(result, param)\n            currentPage++\n          } while (currentPage < remainingPages)\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              client: context.client,\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return pages.length > 0\n    ? options.getNextPageParam(\n        pages[lastIndex],\n        pages,\n        pageParams[lastIndex],\n        pageParams,\n      )\n    : undefined\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return pages.length > 0\n    ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams)\n    : undefined\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n","import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureInfiniteQueryDataOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InferDataFromTag,\n  InferErrorFromTag,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  NoInfer,\n  OmitKeyof,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching<TQueryFilters extends QueryFilters<any> = QueryFilters>(\n    filters?: TQueryFilters,\n  ): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating<\n    TMutationFilters extends MutationFilters<any, any> = MutationFilters,\n  >(filters?: TMutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  /**\n   * Imperative (non-reactive) way to retrieve data for a QueryKey.\n   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n   *\n   * Hint: Do not use this function inside a component, because it won't receive updates.\n   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n   */\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n\n    return this.#queryCache.get<TInferredQueryFnData>(options.queryHash)?.state\n      .data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n    const query = this.#queryCache.build(this, defaultedOptions)\n    const cachedData = query.state.data\n\n    if (cachedData === undefined) {\n      return this.fetchQuery(options)\n    }\n\n    if (\n      options.revalidateIfStale &&\n      query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))\n    ) {\n      void this.prefetchQuery(defaultedOptions)\n    }\n\n    return Promise.resolve(cachedData)\n  }\n\n  getQueriesData<\n    TQueryFnData = unknown,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(filters: TQueryFilters): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): NoInfer<TInferredQueryFnData> | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<\n    TQueryFnData,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(\n    filters: TQueryFilters,\n    updater: Updater<\n      NoInfer<TQueryFnData> | undefined,\n      NoInfer<TQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n    TInferredError = InferErrorFromTag<TError, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TInferredError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TInferredError>(\n      options.queryHash,\n    )?.state\n  }\n\n  removeQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n  ): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    options?: ResetOptions,\n  ): Promise<void> {\n    const queryCache = this.#queryCache\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(\n        {\n          type: 'active',\n          ...filters,\n        },\n        options,\n      )\n    })\n  }\n\n  cancelQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: InvalidateQueryFilters<TTaggedQueryKey>,\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters?.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      return this.refetchQueries(\n        {\n          ...filters,\n          type: filters?.refetchType ?? filters?.type ?? 'active',\n        },\n        options,\n      )\n    })\n  }\n\n  refetchQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: RefetchQueryFilters<TTaggedQueryKey>,\n    options: RefetchOptions = {},\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled() && !query.isStatic())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query),\n    )\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options as any)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  ensureInfiniteQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: EnsureInfiniteQueryDataOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n\n    return this.ensureQueryData(options as any)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n  >(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<\n        QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n        'queryKey'\n      >\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    const result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = void,\n    TContext = unknown,\n  >(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): OmitKeyof<MutationObserverOptions<any, any, any, any>, 'mutationKey'> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    const result: OmitKeyof<\n      MutationObserverOptions<any, any, any, any>,\n      'mutationKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n","import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key as keyof QueryObserverResult)\n        onPropTracked?.(key as keyof QueryObserverResult)\n        return Reflect.get(target, key)\n      },\n    })\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Per default, use query data\n    data = newState.data as unknown as TData\n    let skipSelect = false\n\n    // use placeholderData if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n        // we have to skip select when reading this memoization\n        // because prevResult.data is already \"selected\"\n        skipSelect = true\n      } else {\n        // compute placeholderData\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    // Select data if needed\n    // this also runs placeholderData through the select function\n    if (options.select && data !== undefined && !skipSelect) {\n      // Memoize select result\n      if (\n        prevResult &&\n        data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(data as any)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (\n    resolveEnabled(options.enabled, query) !== false &&\n    resolveStaleTime(options.staleTime, query) !== 'static'\n  ) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","import { tryResolveSync } from './thenable'\nimport type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n  shouldRedactErrors?: (error: unknown) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n  // This is only optional because older versions of Query might have dehydrated\n  // without it which we need to handle for backwards compatibility.\n  // This should be changed to required in the future.\n  dehydratedAt?: number\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n  shouldRedactErrors: (error: unknown) => boolean,\n): DehydratedQuery {\n  return {\n    dehydratedAt: Date.now(),\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (!shouldRedactErrors(error)) {\n          // Reject original error if it should not be redacted\n          return Promise.reject(error)\n        }\n        // If not in production, log original error before rejecting redacted error\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nfunction defaultShouldRedactErrors(_: unknown) {\n  return true\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const shouldRedactErrors =\n    options.shouldRedactErrors ??\n    client.getDefaultOptions().dehydrate?.shouldRedactErrors ??\n    defaultShouldRedactErrors\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query)\n        ? [dehydrateQuery(query, serializeData, shouldRedactErrors)]\n        : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(\n    ({ queryKey, state, queryHash, meta, promise, dehydratedAt }) => {\n      const syncData = promise ? tryResolveSync(promise) : undefined\n      const rawData = state.data === undefined ? syncData?.data : state.data\n      const data = rawData === undefined ? rawData : deserializeData(rawData)\n\n      let query = queryCache.get(queryHash)\n      const existingQueryIsPending = query?.state.status === 'pending'\n      const existingQueryIsFetching = query?.state.fetchStatus === 'fetching'\n\n      // Do not hydrate if an existing query exists with newer data\n      if (query) {\n        const hasNewerSyncData =\n          syncData &&\n          // We only need this undefined check to handle older dehydration\n          // payloads that might not have dehydratedAt\n          dehydratedAt !== undefined &&\n          dehydratedAt > query.state.dataUpdatedAt\n        if (\n          state.dataUpdatedAt > query.state.dataUpdatedAt ||\n          hasNewerSyncData\n        ) {\n          // omit fetchStatus from dehydrated state\n          // so that query stays in its current fetchStatus\n          const { fetchStatus: _ignored, ...serializedState } = state\n          query.setState({\n            ...serializedState,\n            data,\n          })\n        }\n      } else {\n        // Restore query\n        query = queryCache.build(\n          client,\n          {\n            ...client.getDefaultOptions().hydrate?.queries,\n            ...options?.defaultOptions?.queries,\n            queryKey,\n            queryHash,\n            meta,\n          },\n          // Reset fetch status to idle to avoid\n          // query being stuck in fetching state upon hydration\n          {\n            ...state,\n            data,\n            fetchStatus: 'idle',\n            status: data !== undefined ? 'success' : state.status,\n          },\n        )\n      }\n\n      if (\n        promise &&\n        !existingQueryIsPending &&\n        !existingQueryIsFetching &&\n        // Only hydrate if dehydration is newer than any existing data,\n        // this is always true for new queries\n        (dehydratedAt === undefined || dehydratedAt > query.state.dataUpdatedAt)\n      ) {\n        // This doesn't actually fetch - it just creates a retryer\n        // which will re-use the passed `initialPromise`\n        // Note that we need to call these even when data was synchronously\n        // available, as we still need to set up the retryer\n        void query.fetch(undefined, {\n          // RSC transformed promises are not thenable\n          initialPromise: Promise.resolve(promise).then(deserializeData),\n        })\n      }\n    },\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): React.JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from '@tanstack/query-core'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n","import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n\n    const clamp = (value: number | 'static' | undefined) =>\n      value === 'static' ? value : Math.max(value ?? 1000, 1000)\n\n    const originalStaleTime = defaultedOptions.staleTime\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => clamp(originalStaleTime(...args))\n        : clamp(originalStaleTime)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","'use client'\nimport * as React from 'react'\n\nimport { isServer, noop, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './IsRestoringProvider'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const client = useQueryClient(queryClient)\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`,\n      )\n    }\n  }\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions)\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  NoInfer,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","// WSF API Caching Configuration\n// Defines caching strategies for different types of data based on update frequency\n\nconst SECOND = 1000;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\n/**\n * Caching configuration for frequently updated data (every few seconds to minutes)\n * Examples: Vessel locations, terminal sailing space, wait times\n */\nexport const FREQUENT_UPDATE_CONFIG = {\n  // Data is considered stale after 30 seconds\n  staleTime: 30 * SECOND,\n  // Keep in cache for 2 minutes\n  gcTime: 2 * MINUTE,\n  // Refetch every 5 seconds when component is active\n  refetchInterval: 5 * SECOND,\n  // Refetch when window regains focus\n  refetchOnWindowFocus: true,\n  // Retry up to 3 times with exponential backoff\n  retry: 3,\n  retryDelay: (attemptIndex: number) =>\n    Math.min(1000 * 2 ** attemptIndex, 30000),\n} as const;\n\n/**\n * Caching configuration for infrequently updated data (daily to weekly)\n * Examples: Terminal info, vessel specs, routes, schedules, wait times\n *\n * Since this data is invalidated by cache flush dates when it changes,\n * we can cache it for much longer periods to reduce API calls and improve performance.\n */\nexport const INFREQUENT_UPDATE_CONFIG = {\n  // Data is considered stale after 1 week (since cache flush will invalidate if it changes)\n  staleTime: 1 * WEEK,\n  // Keep in cache for 1 month (aggressive caching since cache flush handles invalidation)\n  gcTime: 1 * MONTH,\n  // No automatic refetch interval - rely on cache flush invalidation\n  refetchInterval: false,\n  // Refetch when window regains focus (but only if stale)\n  refetchOnWindowFocus: true,\n  // Retry up to 5 times with exponential backoff\n  retry: 5,\n  retryDelay: (attemptIndex: number) =>\n    Math.min(1000 * 2 ** attemptIndex, 30000),\n} as const;\n\n/**\n * Caching configuration for cache flush date queries\n * These are used to invalidate other queries when data changes\n */\nexport const CACHE_FLUSH_CONFIG = {\n  // Data is considered stale after 5 minutes\n  staleTime: 5 * MINUTE,\n  // Keep in cache for 10 minutes\n  gcTime: 10 * MINUTE,\n  // Refetch every 2 minutes to check for updates\n  refetchInterval: 2 * MINUTE,\n  // Refetch when window regains focus\n  refetchOnWindowFocus: true,\n  // Retry up to 5 times with exponential backoff\n  retry: 5,\n  retryDelay: (attemptIndex: number) =>\n    Math.min(1000 * 2 ** attemptIndex, 30000),\n} as const;\n\n/**\n * Helper function to create query options with frequent update configuration\n */\nexport const createFrequentUpdateOptions = (additionalOptions = {}) => ({\n  ...FREQUENT_UPDATE_CONFIG,\n  ...additionalOptions,\n});\n\n/**\n * Helper function to create query options with infrequent update configuration\n */\nexport const createInfrequentUpdateOptions = (additionalOptions = {}) => ({\n  ...INFREQUENT_UPDATE_CONFIG,\n  ...additionalOptions,\n});\n\n/**\n * Helper function to create query options with cache flush configuration\n */\nexport const createCacheFlushOptions = (additionalOptions = {}) => ({\n  ...CACHE_FLUSH_CONFIG,\n  ...additionalOptions,\n});\n","// Schedule Routes hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { Route } from \"../types\";\nimport {\n  getActiveSeasons,\n  getAlerts,\n  getRouteDetails,\n  getRouteDetailsByRoute,\n  getRouteDetailsByTerminals,\n  getRoutes,\n  getRoutesByTerminals,\n  getRoutesWithDisruptions,\n  getScheduledRoutes,\n  getScheduledRoutesBySeason,\n} from \"./api\";\n\n// Main hooks\n/**\n * Hook for fetching all routes from WSF Schedule API\n *\n * Retrieves the most basic/brief information pertaining to routes for a given trip date.\n * If only a trip date is included, all routes available for that date of travel are returned.\n * Valid trip dates may be determined using the validDateRange endpoint.\n *\n * @param tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @returns React Query result containing an array of Route objects with basic route information\n */\nexport const useRoutes = (tripDate: Date) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"routes\", tripDate.toISOString().split(\"T\")[0]],\n    queryFn: () => getRoutes(tripDate),\n    enabled: !!tripDate,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching routes between specific terminals from WSF Schedule API\n *\n * Retrieves the most basic/brief information pertaining to routes filtered by departing\n * and arriving terminals for a given trip date. Routes in the resultset are filtered\n * to match the specified terminal combination. Valid departing and arriving terminals\n * may be found using the terminalsAndMates endpoint.\n *\n * @param params - Object containing trip date and terminal information\n * @param params.tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @param params.departingTerminalId - The unique identifier for the departing terminal\n * @param params.arrivingTerminalId - The unique identifier for the arriving terminal\n * @returns React Query result containing an array of Route objects filtered by terminal combination\n */\nexport const useRoutesByTerminals = (params: {\n  tripDate: Date;\n  departingTerminalId: number;\n  arrivingTerminalId: number;\n}) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"routes\",\n      \"byTerminals\",\n      params.tripDate.toISOString().split(\"T\")[0],\n      params.departingTerminalId,\n      params.arrivingTerminalId,\n    ],\n    queryFn: () => getRoutesByTerminals(params),\n    enabled:\n      !!params.tripDate &&\n      !!params.departingTerminalId &&\n      !!params.arrivingTerminalId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching routes with service disruptions from WSF Schedule API\n *\n * Retrieves the most basic/brief information for routes currently associated with\n * service disruptions for a given trip date. This endpoint helps identify routes\n * that may have delays, cancellations, or other service issues.\n *\n * @param tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @returns React Query result containing an array of Route objects that have service disruptions\n */\nexport const useRoutesWithDisruptions = (tripDate: Date) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"routes\",\n      \"withDisruptions\",\n      tripDate.toISOString().split(\"T\")[0],\n    ],\n    queryFn: () => getRoutesWithDisruptions(tripDate),\n    enabled: !!tripDate,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching route details from WSF Schedule API\n *\n * Retrieves highly detailed information pertaining to routes for a given trip date.\n * If only a trip date is included, all routes available for that date of travel are returned.\n * This endpoint provides comprehensive route details including sailing times, vessel assignments,\n * and operational information.\n *\n * @param tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @returns React Query result containing an array of Route objects with detailed route information\n */\nexport const useRouteDetails = (tripDate: Date) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"routes\",\n      \"details\",\n      tripDate.toISOString().split(\"T\")[0],\n    ],\n    queryFn: () => getRouteDetails(tripDate),\n    enabled: !!tripDate,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching route details by terminals from WSF Schedule API\n *\n * Retrieves highly detailed information pertaining to routes filtered by departing and\n * arriving terminals for a given trip date. Routes in the resultset are filtered to match\n * the specified terminal combination. Valid departing and arriving terminals may be found\n * using the terminalsAndMates endpoint.\n *\n * @param params - Object containing trip date and terminal information\n * @param params.tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @param params.departingTerminalId - The unique identifier for the departing terminal\n * @param params.arrivingTerminalId - The unique identifier for the arriving terminal\n * @returns React Query result containing an array of Route objects with detailed information filtered by terminal combination\n */\nexport const useRouteDetailsByTerminals = (params: {\n  tripDate: Date;\n  departingTerminalId: number;\n  arrivingTerminalId: number;\n}) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"routes\",\n      \"detailsByTerminals\",\n      params.tripDate.toISOString().split(\"T\")[0],\n      params.departingTerminalId,\n      params.arrivingTerminalId,\n    ],\n    queryFn: () => getRouteDetailsByTerminals(params),\n    enabled:\n      !!params.tripDate &&\n      !!params.departingTerminalId &&\n      !!params.arrivingTerminalId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching route details by route from WSF Schedule API\n *\n * Retrieves highly detailed information for a specific route identified by route ID\n * for a given trip date. This endpoint filters the resultset to a single route,\n * providing comprehensive details for that specific route.\n *\n * @param tripDate - The trip date in YYYY-MM-DD format (e.g., '2024-04-01' for April 1, 2024)\n * @param routeId - The unique identifier for the route\n * @returns React Query result containing an array of Route objects with detailed information for the specified route\n */\nexport const useRouteDetailsByRoute = (tripDate: Date, routeId: number) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"routes\",\n      \"detailsByRoute\",\n      tripDate.toISOString().split(\"T\")[0],\n      routeId,\n    ],\n    queryFn: () => getRouteDetailsByRoute({ tripDate, routeId }),\n    enabled: !!tripDate && !!routeId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching scheduled routes from WSF Schedule API\n *\n * Provides a listing of routes that are active for a season. Results include all known\n * scheduled routes spanning current and upcoming seasons. For example, \"Anacortes / Sidney B.C.\"\n * may be a valid route, but if it's not scheduled to run during a specific season,\n * it won't be returned as part of that season's scheduled routes resultset.\n *\n * @returns React Query result containing an array of Route objects representing all scheduled routes\n */\nexport const useScheduledRoutes = () => {\n  return useQuery({\n    queryKey: [\"schedule\", \"scheduledRoutes\"],\n    queryFn: getScheduledRoutes,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching scheduled routes by season from WSF Schedule API\n *\n * Provides a listing of routes that are active for a specific season identified by schedule ID.\n * Results are filtered to only include scheduled routes for the specified season.\n * Seasons may be determined using the activeSeasons endpoint.\n *\n * @param seasonId - The unique identifier for the season (schedule ID)\n * @returns React Query result containing an array of Route objects representing scheduled routes for the specified season\n */\nexport const useScheduledRoutesBySeason = (seasonId: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"scheduledRoutes\", \"bySeason\", seasonId],\n    queryFn: () => getScheduledRoutesBySeason(seasonId),\n    enabled: !!seasonId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching active seasons from WSF Schedule API\n *\n * Retrieves a summary of active seasons. This endpoint provides information about\n * current and upcoming ferry service seasons, which can be used to determine\n * valid schedule IDs for other endpoints.\n *\n * @returns React Query result containing an array of Route objects with active season information\n */\nexport const useActiveSeasons = () => {\n  return useQuery({\n    queryKey: [\"schedule\", \"activeSeasons\"],\n    queryFn: getActiveSeasons,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching alerts from WSF Schedule API\n *\n * Provides alert information tailored for routes, bulletins, service disruptions, etc.\n * This endpoint returns important notifications and updates that may affect ferry service,\n * including weather-related delays, maintenance notices, and other operational alerts.\n *\n * @returns React Query result containing an array of Route objects with alert information\n */\nexport const useAlerts = () => {\n  return useQuery({\n    queryKey: [\"schedule\", \"alerts\"],\n    queryFn: getAlerts,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// Schedule Schedules API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { ScheduleDeparture as Sailing, Schedule } from \"../types\";\n\n/**\n * API function for fetching schedule by route from WSF Schedule API\n */\nexport const getScheduleByRoute = (params: {\n  tripDate: Date;\n  routeID: number;\n}): Promise<Schedule[]> =>\n  fetchWsfArray<Schedule>(\n    \"schedule\",\n    buildWsfUrl(\"/schedule/{tripDate}/{routeID}\", params)\n  );\n\n/**\n * API function for fetching schedule by terminals from WSF Schedule API\n */\nexport const getScheduleByTerminals = (params: {\n  tripDate: Date;\n  departingTerminalID: number;\n  arrivingTerminalID: number;\n}): Promise<Schedule[]> =>\n  fetchWsfArray<Schedule>(\n    \"schedule\",\n    buildWsfUrl(\n      \"/schedule/{tripDate}/{departingTerminalID}/{arrivingTerminalID}\",\n      params\n    )\n  );\n\n/**\n * API function for fetching today's schedule by route from WSF Schedule API\n */\nexport const getScheduleTodayByRoute = (params: {\n  routeID: number;\n  onlyRemainingTimes?: boolean;\n}): Promise<Schedule[]> =>\n  fetchWsfArray<Schedule>(\n    \"schedule\",\n    buildWsfUrl(\"/scheduletoday/{routeID}\", params)\n  );\n\n/**\n * API function for fetching today's schedule by terminals from WSF Schedule API\n */\nexport const getScheduleTodayByTerminals = (params: {\n  departingTerminalID: number;\n  arrivingTerminalID: number;\n  onlyRemainingTimes?: boolean;\n}): Promise<Schedule[]> =>\n  fetchWsfArray<Schedule>(\n    \"schedule\",\n    buildWsfUrl(\n      \"/scheduletoday/{departingTerminalID}/{arrivingTerminalID}\",\n      params\n    )\n  );\n\n/**\n * API function for fetching sailings from WSF Schedule API\n */\nexport const getSailings = (params: {\n  schedRouteID: number;\n}): Promise<Sailing[]> =>\n  fetchWsfArray<Sailing>(\n    \"schedule\",\n    buildWsfUrl(\"/sailings/{schedRouteID}\", params)\n  );\n\n/**\n * API function for fetching all sailings from WSF Schedule API\n */\nexport const getAllSailings = (params: {\n  schedRouteID: number;\n  year: number;\n}): Promise<Sailing[]> =>\n  fetchWsfArray<Sailing>(\n    \"schedule\",\n    buildWsfUrl(\"/allsailings/{schedRouteID}/{year}\", params)\n  );\n","// Schedule Schedules hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { ScheduleDeparture as Sailing, Schedule } from \"../types\";\nimport {\n  getAllSailings,\n  getSailings,\n  getScheduleByRoute,\n  getScheduleByTerminals,\n  getScheduleTodayByRoute,\n  getScheduleTodayByTerminals,\n} from \"./api\";\n\n/**\n * Hook for fetching schedule by route from WSF Schedule API\n *\n * Retrieves schedule information for a specific route and date.\n * This data is updated infrequently and provides static schedule\n * information used in route-specific scheduling contexts.\n *\n * @param tripDate - The trip date for the schedule\n * @param routeId - The route ID to get schedule for\n * @returns React Query result containing Schedule data\n */\nexport const useScheduleByRoute = (tripDate: Date, routeId: number) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"schedules\",\n      \"byRoute\",\n      tripDate.toISOString().split(\"T\")[0],\n      routeId,\n    ],\n    queryFn: () => getScheduleByRoute({ tripDate, routeID: routeId }),\n    enabled: !!tripDate && !!routeId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching schedule by terminals from WSF Schedule API\n *\n * Retrieves schedule information for a specific terminal pair and date.\n * This data is updated infrequently and provides static schedule\n * information used in terminal-specific scheduling contexts.\n *\n * @param params - Object containing trip date and terminal IDs\n * @returns React Query result containing Schedule data\n */\nexport const useScheduleByTerminals = (params: {\n  tripDate: Date;\n  departingTerminalID: number;\n  arrivingTerminalID: number;\n}) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"schedules\",\n      \"byTerminals\",\n      params.tripDate.toISOString().split(\"T\")[0],\n      params.departingTerminalID,\n      params.arrivingTerminalID,\n    ],\n    queryFn: () => getScheduleByTerminals(params),\n    enabled:\n      !!params.tripDate &&\n      !!params.departingTerminalID &&\n      !!params.arrivingTerminalID,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching today's schedule by route from WSF Schedule API\n *\n * Retrieves today's schedule information for a specific route.\n * This data is updated infrequently and provides static schedule\n * information used in route-specific scheduling contexts.\n *\n * @param routeId - The route ID to get today's schedule for\n * @returns React Query result containing Schedule data\n */\nexport const useScheduleTodayByRoute = (routeId: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"schedules\", \"todayByRoute\", routeId],\n    queryFn: () => getScheduleTodayByRoute({ routeID: routeId }),\n    enabled: !!routeId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching today's schedule by terminals from WSF Schedule API\n *\n * Retrieves today's schedule information for a specific terminal pair.\n * This data is updated infrequently and provides static schedule\n * information used in terminal-specific scheduling contexts.\n *\n * @param params - Object containing terminal IDs\n * @returns React Query result containing Schedule data\n */\nexport const useScheduleTodayByTerminals = (params: {\n  departingTerminalID: number;\n  arrivingTerminalID: number;\n}) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"schedules\",\n      \"todayByTerminals\",\n      params.departingTerminalID,\n      params.arrivingTerminalID,\n    ],\n    queryFn: () => getScheduleTodayByTerminals(params),\n    enabled: !!params.departingTerminalID && !!params.arrivingTerminalID,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching sailings from WSF Schedule API\n *\n * Retrieves sailing information for a specific scheduled route.\n * This data is updated infrequently and provides static sailing\n * information used in scheduled route contexts.\n *\n * @param schedRouteID - The scheduled route ID to get sailings for\n * @returns React Query result containing an array of Sailing objects\n */\nexport const useSailings = (schedRouteID: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"sailings\", schedRouteID],\n    queryFn: () => getSailings({ schedRouteID }),\n    enabled: !!schedRouteID,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching all sailings from WSF Schedule API\n *\n * Retrieves all sailing information for a specific scheduled route and year.\n * This data is updated infrequently and provides static sailing\n * information used in scheduled route contexts.\n *\n * @param schedRouteID - The scheduled route ID to get sailings for\n * @param year - The year to get sailings for\n * @returns React Query result containing an array of Sailing objects\n */\nexport const useAllSailings = (schedRouteID: number, year: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"allSailings\", schedRouteID, year],\n    queryFn: () => getAllSailings({ schedRouteID, year }),\n    enabled: !!schedRouteID && !!year,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// Schedule terminals API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { TerminalBasics as ScheduleTerminal } from \"../../terminals/types\";\n\n/**\n * API function for fetching all terminals from WSF Schedule API\n *\n * Retrieves all valid departing terminals for a specific trip date.\n *\n * @param tripDate - The date for which to get terminal information\n * @returns Promise resolving to an array of ScheduleTerminal objects\n */\nexport const getTerminals = (tripDate: Date): Promise<ScheduleTerminal[]> =>\n  fetchWsfArray<ScheduleTerminal>(\n    \"schedule\",\n    buildWsfUrl(\"/terminals/{tripDate}\", { tripDate })\n  );\n\n/**\n * API function for fetching terminals by route from WSF Schedule API\n *\n * Retrieves all terminal combinations for a specific route.\n *\n * @param routeId - The route ID to get terminals for\n * @returns Promise resolving to an array of ScheduleTerminal objects\n */\nexport const getTerminalsByRoute = (\n  routeId: number\n): Promise<ScheduleTerminal[]> =>\n  fetchWsfArray<ScheduleTerminal>(\n    \"schedule\",\n    buildWsfUrl(\"/terminalsandmatesbyroute/{routeId}\", { routeId })\n  );\n\n/**\n * API function for fetching terminals and mates from WSF Schedule API\n *\n * Retrieves all terminal combinations (departing and arriving) for a specific trip date.\n *\n * @param tripDate - The date for which to get terminal combinations\n * @returns Promise resolving to an array of ScheduleTerminal objects\n */\nexport const getTerminalsAndMates = (\n  tripDate: Date\n): Promise<ScheduleTerminal[]> =>\n  fetchWsfArray<ScheduleTerminal>(\n    \"schedule\",\n    buildWsfUrl(\"/terminalsandmates/{tripDate}\", { tripDate })\n  );\n\n/**\n * API function for fetching terminal mates from WSF Schedule API\n *\n * Retrieves all arriving terminals for a specific departing terminal on a given date.\n *\n * @param tripDate - The date for which to get terminal mates\n * @param terminalId - The departing terminal ID\n * @returns Promise resolving to an array of ScheduleTerminal objects\n */\nexport const getTerminalMates = (\n  tripDate: Date,\n  terminalId: number\n): Promise<ScheduleTerminal[]> =>\n  fetchWsfArray<ScheduleTerminal>(\n    \"schedule\",\n    buildWsfUrl(\"/terminalmates/{tripDate}/{terminalId}\", {\n      tripDate,\n      terminalId,\n    })\n  );\n","// Schedule terminals hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { TerminalBasics as ScheduleTerminal } from \"../../terminals/types\";\nimport {\n  getTerminalMates,\n  getTerminals,\n  getTerminalsAndMates,\n  getTerminalsByRoute,\n} from \"./api\";\n\n/**\n * Hook for fetching all terminals from WSF Schedule API\n *\n * Retrieves terminal information for schedule-related operations.\n * This data is updated infrequently and provides static terminal\n * information used in scheduling contexts.\n *\n * @param tripDate - The date for which to get terminal information\n * @returns React Query result with ScheduleTerminal array data\n */\nexport const useTerminals = (tripDate: Date) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"terminals\", tripDate.toISOString().split(\"T\")[0]],\n    queryFn: () => getTerminals(tripDate),\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching terminals by route from WSF Schedule API\n *\n * Retrieves terminal information for a specific route.\n * This data is updated infrequently and provides static terminal\n * information used in route-specific scheduling contexts.\n *\n * @param routeId - The route ID to get terminals for\n * @returns React Query result with ScheduleTerminal array data\n */\nexport const useTerminalsByRoute = (routeId: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"terminals\", \"byRoute\", routeId],\n    queryFn: () => getTerminalsByRoute(routeId),\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching terminals and mates from WSF Schedule API\n *\n * Retrieves terminal combinations for schedule-related operations.\n * This data is updated infrequently and provides static terminal\n * pairing information used in scheduling contexts.\n *\n * @param tripDate - The date for which to get terminal combinations\n * @returns React Query result with ScheduleTerminal array data\n */\nexport const useTerminalsAndMates = (tripDate: Date) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"terminals\",\n      \"andMates\",\n      tripDate.toISOString().split(\"T\")[0],\n    ],\n    queryFn: () => getTerminalsAndMates(tripDate),\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching terminal mates from WSF Schedule API\n *\n * Retrieves terminal mate information for a specific terminal.\n * This data is updated infrequently and provides static terminal\n * pairing information used in scheduling contexts.\n *\n * @param tripDate - The date for which to get terminal mates\n * @param terminalId - The departing terminal ID\n * @returns React Query result with ScheduleTerminal array data\n */\nexport const useTerminalMates = (tripDate: Date, terminalId: number) => {\n  return useQuery({\n    queryKey: [\n      \"schedule\",\n      \"terminals\",\n      \"mates\",\n      tripDate.toISOString().split(\"T\")[0],\n      terminalId,\n    ],\n    queryFn: () => getTerminalMates(tripDate, terminalId),\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// Schedule vessels API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { Vessel } from \"../../vessels/types\";\n\n/**\n * API function for fetching all vessels from WSF Schedule API\n */\nexport const getVessels = (): Promise<Vessel[]> =>\n  fetchWsfArray<Vessel>(\"schedule\", \"/vessels\");\n\n/**\n * API function for fetching vessels by route from WSF Schedule API\n */\nexport const getVesselsByRoute = (routeID: number): Promise<Vessel[]> =>\n  fetchWsfArray<Vessel>(\n    \"schedule\",\n    buildWsfUrl(\"/vessels/{routeID}\", { routeID })\n  );\n","// Schedule Vessels hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { Vessel } from \"../../vessels/types\";\nimport { getVessels, getVesselsByRoute } from \"./api\";\n\n/**\n * Hook for fetching all vessels from WSF Schedule API\n *\n * Retrieves vessel information for schedule-related operations.\n * This data is updated infrequently and provides static vessel\n * information used in scheduling contexts.\n *\n * @returns React Query result containing an array of Vessel objects\n */\nexport const useVessels = () => {\n  return useQuery({\n    queryKey: [\"schedule\", \"vessels\"],\n    queryFn: getVessels,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching vessels by route from WSF Schedule API\n *\n * Retrieves vessel information for a specific route.\n * This data is updated infrequently and provides static vessel\n * information used in route-specific scheduling contexts.\n *\n * @param routeId - The route ID to get vessels for\n * @returns React Query result containing an array of Vessel objects\n */\nexport const useVesselsByRoute = (routeId: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"vessels\", \"byRoute\", routeId],\n    queryFn: () => getVesselsByRoute(routeId),\n    enabled: !!routeId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// Schedule Time Adjustments API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { TimeAdjustment } from \"../types\";\n\n/**\n * API function for fetching all time adjustments from WSF Schedule API\n */\nexport const getTimeAdjustments = (): Promise<TimeAdjustment[]> =>\n  fetchWsfArray<TimeAdjustment>(\"schedule\", \"/timeadj\");\n\n/**\n * API function for fetching time adjustments by route from WSF Schedule API\n */\nexport const getTimeAdjustmentsByRoute = (\n  routeID: number\n): Promise<TimeAdjustment[]> =>\n  fetchWsfArray<TimeAdjustment>(\n    \"schedule\",\n    buildWsfUrl(\"/timeadjbyroute/{routeID}\", { routeID })\n  );\n\n/**\n * API function for fetching time adjustments by scheduled route from WSF Schedule API\n */\nexport const getTimeAdjustmentsBySchedRoute = (\n  schedRouteID: number\n): Promise<TimeAdjustment[]> =>\n  fetchWsfArray<TimeAdjustment>(\n    \"schedule\",\n    buildWsfUrl(\"/timeadjbyschedroute/{schedRouteID}\", { schedRouteID })\n  );\n","// Schedule Time Adjustments hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { TimeAdjustment } from \"../types\";\nimport {\n  getTimeAdjustments,\n  getTimeAdjustmentsByRoute,\n  getTimeAdjustmentsBySchedRoute,\n} from \"./api\";\n\n/**\n * Hook for fetching all time adjustments from WSF Schedule API\n *\n * Retrieves time adjustment information for schedule operations.\n * This data is updated infrequently and provides static time\n * adjustment information used in scheduling contexts.\n *\n * @returns React Query result containing an array of TimeAdjustment objects\n */\nexport const useTimeAdjustments = () => {\n  return useQuery({\n    queryKey: [\"schedule\", \"timeAdjustments\"],\n    queryFn: getTimeAdjustments,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching time adjustments by route from WSF Schedule API\n *\n * Retrieves time adjustment information for a specific route.\n * This data is updated infrequently and provides static time\n * adjustment information used in route-specific scheduling contexts.\n *\n * @param routeId - The route ID to get time adjustments for\n * @returns React Query result containing an array of TimeAdjustment objects\n */\nexport const useTimeAdjustmentsByRoute = (routeId: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"timeAdjustments\", \"byRoute\", routeId],\n    queryFn: () => getTimeAdjustmentsByRoute(routeId),\n    enabled: !!routeId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching time adjustments by scheduled route from WSF Schedule API\n *\n * Retrieves time adjustment information for a specific scheduled route.\n * This data is updated infrequently and provides static time\n * adjustment information used in scheduled route contexts.\n *\n * @param schedRouteID - The scheduled route ID to get time adjustments for\n * @returns React Query result containing an array of TimeAdjustment objects\n */\nexport const useTimeAdjustmentsBySchedRoute = (schedRouteID: number) => {\n  return useQuery({\n    queryKey: [\"schedule\", \"timeAdjustments\", \"bySchedRoute\", schedRouteID],\n    queryFn: () => getTimeAdjustmentsBySchedRoute(schedRouteID),\n    enabled: !!schedRouteID,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// Schedule Valid Date Range API functions\n\nimport { fetchWsf } from \"../../shared/fetching/fetch\";\nimport type { ValidDateRange } from \"../types\";\n\n/**\n * API function for fetching valid date range from WSF API\n * This is a general infrastructure endpoint used across all WSF API operations\n */\nexport const getValidDateRange = (): Promise<ValidDateRange | null> =>\n  fetchWsf<ValidDateRange>(\"schedule\", \"/validdaterange\");\n","// Schedule Valid Date Range hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport { getValidDateRange } from \"./api\";\n\n/**\n * Hook for fetching valid date range from WSF API\n *\n * Retrieves the valid date range for all WSF API operations.\n * This data is updated infrequently and provides static date\n * range information used to determine which dates are supported by the API.\n *\n * @returns React Query result with ValidDateRange object\n */\nexport const useValidDateRange = () => {\n  return useQuery({\n    queryKey: [\"schedule\", \"validDateRange\"],\n    queryFn: getValidDateRange,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// Schedule cache flush date API functions\n\nimport { fetchWsf } from \"../../shared/fetching/fetch\";\nimport type { ScheduleCacheFlushDate } from \"../types\";\n\n/**\n * API function for fetching cache flush date from WSF Schedule API\n *\n * Retrieves the last cache flush date for the Schedule API, which indicates\n * when the underlying data was last updated on the server. This endpoint\n * is used to determine when to invalidate cached schedule data.\n *\n * The cache flush date changes when any schedule-related data is updated,\n * including routes, schedules, terminals, vessels, time adjustments, and alerts.\n *\n * @returns Promise resolving to ScheduleCacheFlushDate object or null if fetch fails\n */\nexport const getCacheFlushDateSchedule =\n  (): Promise<ScheduleCacheFlushDate | null> =>\n    fetchWsf<ScheduleCacheFlushDate>(\"schedule\", \"/cacheflushdate\");\n","// Schedule cache flush date hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createCacheFlushOptions } from \"../../shared/caching/config\";\nimport type { ScheduleCacheFlushDate } from \"../types\";\nimport { getCacheFlushDateSchedule } from \"./api\";\n\n/**\n * Hook for fetching cache flush date from WSF Schedule API with React Query\n *\n * Retrieves the last cache flush date for the Schedule API, which indicates\n * when the underlying data was last updated on the server. This hook is used\n * to determine when to invalidate cached schedule data.\n *\n * The cache flush date changes when any schedule-related data is updated,\n * including routes, schedules, terminals, vessels, time adjustments, and alerts.\n *\n * @returns React Query result with ScheduleCacheFlushDate data\n */\nexport const useCacheFlushDateSchedule = () => {\n  return useQuery({\n    queryKey: [\"schedule\", \"cacheFlushDate\"],\n    queryFn: getCacheFlushDateSchedule,\n    ...createCacheFlushOptions(),\n  });\n};\n","// Cache flush date API functions\n\nimport { fetchWsf } from \"../../shared/fetching/fetch\";\nimport type { TerminalsCacheFlushDate } from \"../types\";\n\n/**\n * API function for fetching cache flush date from WSF Terminals API\n *\n * Returns the date when the terminal data cache was last flushed,\n * indicating when the data was last updated.\n *\n * @returns Promise resolving to TerminalsCacheFlushDate object or null\n */\nexport const getCacheFlushDateTerminals =\n  (): Promise<TerminalsCacheFlushDate | null> =>\n    fetchWsf<TerminalsCacheFlushDate>(\"terminals\", \"/cacheflushdate\");\n","// CacheFlushDateTerminals React Query hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createCacheFlushOptions } from \"../../shared/caching/config\";\nimport { getCacheFlushDateTerminals } from \"./api\";\n\n/**\n * Hook function for fetching cache flush date from WSF Terminals API with React Query\n */\nexport const useCacheFlushDateTerminals = () =>\n  useQuery({\n    queryKey: [\"terminals\", \"cacheFlushDate\"],\n    queryFn: getCacheFlushDateTerminals,\n    ...createCacheFlushOptions(),\n  });\n","// Terminal sailing space API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { TerminalSailingSpace } from \"../types\";\n\n// Main API functions\n/**\n * API function for fetching terminal sailing space data from WSF Terminals API\n *\n * Retrieves current space availability information for all terminals including\n * vehicle capacity, wait times, and space status. This endpoint provides real-time\n * information about space availability at all WSF terminals, including current\n * vehicle capacity, estimated wait times, and space status for upcoming sailings.\n *\n * This data is updated frequently and provides dynamic terminal capacity information\n * that changes throughout the day based on current demand and vessel assignments.\n *\n * @returns Promise resolving to an array of TerminalSailingSpace objects containing real-time space availability information\n */\nexport const getTerminalSailingSpace = (): Promise<TerminalSailingSpace[]> =>\n  fetchWsfArray<TerminalSailingSpace>(\"terminals\", \"/terminalsailingspace\");\n\n/**\n * API function for fetching terminal sailing space data for a specific terminal from WSF Terminals API\n *\n * Retrieves current space availability information for a specific terminal identified by terminal ID,\n * including vehicle capacity, wait times, and space status. This endpoint filters the resultset\n * to a single terminal, providing real-time information about space availability, current\n * vehicle capacity, estimated wait times, and space status for upcoming sailings.\n *\n * This data is updated frequently and provides dynamic terminal capacity information\n * that changes throughout the day based on current demand and vessel assignments.\n *\n * @param terminalId - The unique identifier for the terminal (e.g., 7 for Anacortes, 8 for Friday Harbor)\n * @returns Promise resolving to an array of TerminalSailingSpace objects containing real-time space availability information for the specified terminal\n */\nexport const getTerminalSailingSpaceById = (\n  terminalId: number\n): Promise<TerminalSailingSpace[]> =>\n  fetchWsfArray<TerminalSailingSpace>(\n    \"terminals\",\n    buildWsfUrl(\"/terminalsailingspace/{terminalId}\", { terminalId })\n  );\n","// Terminal sailing space hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createFrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { TerminalSailingSpace } from \"../types\";\nimport { getTerminalSailingSpace, getTerminalSailingSpaceById } from \"./api\";\n\n// Main hooks\n/**\n * Hook for fetching terminal sailing space data from WSF Terminals API\n *\n * Retrieves current space availability information for all terminals including\n * vehicle capacity, wait times, and space status. This endpoint provides real-time\n * information about space availability at all WSF terminals, including current\n * vehicle capacity, estimated wait times, and space status for upcoming sailings.\n *\n * This data is updated frequently and provides dynamic terminal capacity information\n * that changes throughout the day based on current demand and vessel assignments.\n *\n * @returns React Query result containing an array of TerminalSailingSpace objects with real-time space availability information\n */\nexport const useTerminalSailingSpace = () => {\n  return useQuery({\n    queryKey: [\"terminals\", \"sailingSpace\"],\n    queryFn: getTerminalSailingSpace,\n    ...createFrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching terminal sailing space data for a specific terminal from WSF Terminals API\n *\n * Retrieves current space availability information for a specific terminal identified by terminal ID,\n * including vehicle capacity, wait times, and space status. This endpoint filters the resultset\n * to a single terminal, providing real-time information about space availability, current\n * vehicle capacity, estimated wait times, and space status for upcoming sailings.\n *\n * This data is updated frequently and provides dynamic terminal capacity information\n * that changes throughout the day based on current demand and vessel assignments.\n *\n * @param terminalId - The unique identifier for the terminal (e.g., 7 for Anacortes, 8 for Friday Harbor)\n * @returns React Query result containing an array of TerminalSailingSpace objects with real-time space availability information for the specified terminal\n */\nexport const useTerminalSailingSpaceById = (terminalId: number) => {\n  return useQuery({\n    queryKey: [\"terminals\", \"sailingSpace\", \"byId\", terminalId],\n    queryFn: () => getTerminalSailingSpaceById(terminalId),\n    enabled: !!terminalId,\n    ...createFrequentUpdateOptions(),\n  });\n};\n","// Terminal verbose API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { TerminalVerbose } from \"../types\";\n\n// Main API functions\n/**\n * API function for fetching terminal verbose data from WSF Terminals API\n *\n * Retrieves comprehensive terminal information including location, facilities,\n * parking information, and operational status. This endpoint provides detailed\n * information about all terminals in the WSF system, including terminal\n * coordinates, available facilities, parking capacity, and current operational status.\n *\n * This data is updated infrequently and provides static terminal characteristics\n * that don't change often, such as terminal specifications and facilities.\n *\n * @returns Promise resolving to an array of TerminalVerbose objects containing comprehensive terminal information\n */\nexport const getTerminalVerbose = (): Promise<TerminalVerbose[]> =>\n  fetchWsfArray<TerminalVerbose>(\"terminals\", \"/terminalverbose\");\n\n/**\n * API function for fetching terminal verbose data for a specific terminal from WSF Terminals API\n *\n * Retrieves comprehensive terminal information for a specific terminal identified by terminal ID,\n * including location, facilities, parking information, and operational status. This endpoint\n * filters the resultset to a single terminal, providing detailed information about terminal\n * coordinates, available facilities, parking capacity, and current operational status.\n *\n * This data is updated infrequently and provides static terminal characteristics\n * that don't change often, such as terminal specifications and facilities.\n *\n * @param terminalId - The unique identifier for the terminal (e.g., 7 for Anacortes, 8 for Friday Harbor)\n * @returns Promise resolving to an array of TerminalVerbose objects containing comprehensive information for the specified terminal\n */\nexport const getTerminalVerboseById = (\n  terminalId: number\n): Promise<TerminalVerbose[]> =>\n  fetchWsfArray<TerminalVerbose>(\n    \"terminals\",\n    buildWsfUrl(\"/terminalverbose/{terminalId}\", { terminalId })\n  );\n","// Terminal verbose hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { TerminalVerbose } from \"../types\";\nimport { getTerminalVerbose, getTerminalVerboseById } from \"./api\";\n\n// Main hooks\n/**\n * Hook for fetching terminal verbose data from WSF Terminals API\n *\n * Retrieves comprehensive terminal information including location, facilities,\n * parking information, and operational status. This endpoint provides detailed\n * information about all terminals in the WSF system, including terminal\n * coordinates, available facilities, parking capacity, and current operational status.\n *\n * This data is updated infrequently and provides static terminal characteristics\n * that don't change often, such as terminal specifications and facilities.\n *\n * @returns React Query result containing an array of TerminalVerbose objects with comprehensive terminal information\n */\nexport const useTerminalVerbose = () => {\n  return useQuery({\n    queryKey: [\"terminals\", \"verbose\"],\n    queryFn: getTerminalVerbose,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching terminal verbose data for a specific terminal from WSF Terminals API\n *\n * Retrieves comprehensive terminal information for a specific terminal identified by terminal ID,\n * including location, facilities, parking information, and operational status. This endpoint\n * filters the resultset to a single terminal, providing detailed information about terminal\n * coordinates, available facilities, parking capacity, and current operational status.\n *\n * This data is updated infrequently and provides static terminal characteristics\n * that don't change often, such as terminal specifications and facilities.\n *\n * @param terminalId - The unique identifier for the terminal (e.g., 7 for Anacortes, 8 for Friday Harbor)\n * @returns React Query result containing an array of TerminalVerbose objects with comprehensive information for the specified terminal\n */\nexport const useTerminalVerboseById = (terminalId: number) => {\n  return useQuery({\n    queryKey: [\"terminals\", \"verbose\", \"byId\", terminalId],\n    queryFn: () => getTerminalVerboseById(terminalId),\n    enabled: !!terminalId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// Cache flush date API functions\n\nimport { fetchWsf } from \"../../shared/fetching/fetch\";\nimport type { VesselsCacheFlushDate } from \"../types\";\n\n/**\n * API function for fetching cache flush date from WSF Vessels API\n *\n * Returns the date when the vessel data cache was last flushed,\n * indicating when the data was last updated.\n *\n * @returns Promise resolving to VesselCacheFlushDate object or null\n */\nexport const getCacheFlushDateVessels =\n  (): Promise<VesselsCacheFlushDate | null> =>\n    fetchWsf<VesselsCacheFlushDate>(\"vessels\", \"/cacheflushdate\");\n","// Cache flush date hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createCacheFlushOptions } from \"../../shared/caching/config\";\nimport type { VesselsCacheFlushDate as VesselCacheFlushDate } from \"../types\";\nimport { getCacheFlushDateVessels } from \"./api\";\n\n/**\n * Hook function for fetching cache flush date from WSF Vessels API with React Query\n *\n * @returns React Query result with VesselCacheFlushDate data\n */\nexport const useCacheFlushDateVessels = () => {\n  return useQuery({\n    queryKey: [\"vessels\", \"cacheFlushDate\"],\n    queryFn: getCacheFlushDateVessels,\n    ...createCacheFlushOptions(),\n  });\n};\n","// VesselLocations API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { VesselLocation } from \"../types\";\n\n// Main API functions\n/**\n * API function for fetching current vessel location data from WSF Vessels API\n *\n * Retrieves real-time vessel positions, speeds, headings, and status information\n * from the Washington State Ferries API. This endpoint provides current location\n * data for all active vessels in the WSF fleet, including GPS coordinates,\n * vessel speed, heading direction, and operational status.\n *\n * The data is updated frequently and provides the most current information\n * about vessel locations for tracking and monitoring purposes.\n *\n * @returns Promise resolving to an array of VesselLocation objects containing real-time vessel position data\n */\nexport const getVesselLocations = (): Promise<VesselLocation[]> =>\n  fetchWsfArray<VesselLocation>(\"vessels\", \"/vessellocations\");\n\n/**\n * API function for fetching current vessel location data for a specific vessel from WSF Vessels API\n *\n * Retrieves real-time vessel position, speed, heading, and status information\n * for a specific vessel identified by vessel ID. This endpoint filters the\n * resultset to a single vessel, providing current location data including\n * GPS coordinates, vessel speed, heading direction, and operational status.\n *\n * The data is updated frequently and provides the most current information\n * about the specified vessel's location for tracking and monitoring purposes.\n *\n * @param vesselId - The unique identifier for the vessel (e.g., 1 for M/V Cathlamet)\n * @returns Promise resolving to an array of VesselLocation objects containing real-time position data for the specified vessel\n */\nexport const getVesselLocationsByVesselId = (\n  vesselId: number\n): Promise<VesselLocation[]> =>\n  fetchWsfArray<VesselLocation>(\n    \"vessels\",\n    buildWsfUrl(\"/vessellocations/{vesselId}\", { vesselId })\n  );\n","// Vessel locations hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\n// Main hooks\nimport { createFrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { VesselLocation } from \"../types\";\nimport { getVesselLocations, getVesselLocationsByVesselId } from \"./api\";\n\n/**\n * Hook for fetching vessel location data from WSF Vessels API\n *\n * Retrieves real-time vessel positions, speeds, headings, and status information\n * from the Washington State Ferries API. This endpoint provides current location\n * data for all active vessels in the WSF fleet, including GPS coordinates,\n * vessel speed, heading direction, and operational status.\n *\n * The data is updated frequently and provides the most current information\n * about vessel locations for tracking and monitoring purposes.\n *\n * @returns React Query result containing an array of VesselLocation objects with real-time vessel position data\n */\nexport const useVesselLocations = () => {\n  return useQuery({\n    queryKey: [\"vessels\", \"locations\"],\n    queryFn: getVesselLocations,\n    ...createFrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching vessel location data for a specific vessel from WSF Vessels API\n *\n * Retrieves real-time vessel position, speed, heading, and status information\n * for a specific vessel identified by vessel ID. This endpoint filters the\n * resultset to a single vessel, providing current location data including\n * GPS coordinates, vessel speed, heading direction, and operational status.\n *\n * The data is updated frequently and provides the most current information\n * about the specified vessel's location for tracking and monitoring purposes.\n *\n * @param vesselId - The unique identifier for the vessel (e.g., 1 for M/V Cathlamet)\n * @returns React Query result containing an array of VesselLocation objects with real-time position data for the specified vessel\n */\nexport const useVesselLocationsByVesselId = (vesselId: number) => {\n  return useQuery({\n    queryKey: [\"vessels\", \"locations\", \"byVesselId\", vesselId],\n    queryFn: () => getVesselLocationsByVesselId(vesselId),\n    enabled: !!vesselId,\n    ...createFrequentUpdateOptions(),\n  });\n};\n","// Vessel verbose API functions\n\nimport { buildWsfUrl } from \"../../shared/fetching/dateUtils\";\nimport { fetchWsfArray } from \"../../shared/fetching/fetch\";\nimport type { VesselVerbose } from \"../types\";\n\n// Main API functions\n/**\n * API function for fetching vessel verbose data from WSF Vessels API\n *\n * Retrieves comprehensive vessel information including specifications, capacity,\n * amenities, and operational status. This endpoint provides detailed information\n * about all vessels in the WSF fleet, including vessel dimensions, passenger\n * and vehicle capacity, onboard amenities, and current operational status.\n *\n * This data is updated infrequently and provides static vessel characteristics\n * that don't change often, such as vessel specifications and capabilities.\n *\n * @returns Promise resolving to an array of VesselVerbose objects containing comprehensive vessel information\n */\nexport const getVesselVerbose = (): Promise<VesselVerbose[]> =>\n  fetchWsfArray<VesselVerbose>(\"vessels\", \"/vesselverbose\");\n\n/**\n * API function for fetching vessel verbose data for a specific vessel from WSF Vessels API\n *\n * Retrieves comprehensive vessel information for a specific vessel identified by vessel ID,\n * including specifications, capacity, amenities, and operational status. This endpoint\n * filters the resultset to a single vessel, providing detailed information about vessel\n * dimensions, passenger and vehicle capacity, onboard amenities, and current operational status.\n *\n * This data is updated infrequently and provides static vessel characteristics\n * that don't change often, such as vessel specifications and capabilities.\n *\n * @param vesselId - The unique identifier for the vessel (e.g., 1 for M/V Cathlamet)\n * @returns Promise resolving to an array of VesselVerbose objects containing comprehensive information for the specified vessel\n */\nexport const getVesselVerboseById = (\n  vesselId: number\n): Promise<VesselVerbose[]> =>\n  fetchWsfArray<VesselVerbose>(\n    \"vessels\",\n    buildWsfUrl(\"/vesselverbose/{vesselId}\", { vesselId })\n  );\n","// Vessel verbose hooks\n\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { createInfrequentUpdateOptions } from \"../../shared/caching/config\";\nimport type { VesselVerbose } from \"../types\";\nimport { getVesselVerbose, getVesselVerboseById } from \"./api\";\n\n// Main hooks\n/**\n * Hook for fetching vessel verbose data from WSF Vessels API\n *\n * Retrieves comprehensive vessel information including specifications, capacity,\n * amenities, and operational status. This endpoint provides detailed information\n * about all vessels in the WSF fleet, including vessel dimensions, passenger\n * and vehicle capacity, onboard amenities, and current operational status.\n *\n * This data is updated infrequently and provides static vessel characteristics\n * that don't change often, such as vessel specifications and capabilities.\n *\n * @returns React Query result containing an array of VesselVerbose objects with comprehensive vessel information\n */\nexport const useVesselVerbose = () => {\n  return useQuery({\n    queryKey: [\"vessels\", \"verbose\"],\n    queryFn: getVesselVerbose,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n\n/**\n * Hook for fetching vessel verbose data for a specific vessel from WSF Vessels API\n *\n * Retrieves comprehensive vessel information for a specific vessel identified by vessel ID,\n * including specifications, capacity, amenities, and operational status. This endpoint\n * filters the resultset to a single vessel, providing detailed information about vessel\n * dimensions, passenger and vehicle capacity, onboard amenities, and current operational status.\n *\n * This data is updated infrequently and provides static vessel characteristics\n * that don't change often, such as vessel specifications and capabilities.\n *\n * @param vesselId - The unique identifier for the vessel (e.g., 1 for M/V Cathlamet)\n * @returns React Query result containing an array of VesselVerbose objects with comprehensive information for the specified vessel\n */\nexport const useVesselVerboseById = (vesselId: number) => {\n  return useQuery({\n    queryKey: [\"vessels\", \"verbose\", \"byId\", vesselId],\n    queryFn: () => getVesselVerboseById(vesselId),\n    enabled: !!vesselId,\n    ...createInfrequentUpdateOptions(),\n  });\n};\n","// WSF Cache Provider Component\n// Monitors cache flush dates and automatically invalidates queries when data changes\n\nimport { useEffect, useRef } from \"react\";\n\nimport { useCacheFlushDateSchedule } from \"../../schedule/cacheFlushDateSchedule\";\nimport { useCacheFlushDateTerminals } from \"../../terminals/cacheFlushDateTerminals\";\nimport { useCacheFlushDateVessels } from \"../../vessels/cacheFlushDateVessels\";\nimport { useWsfCacheFlushMonitor } from \"./invalidation\";\n\n/**\n * WSF Cache Provider Component\n *\n * This component monitors cache flush dates from all WSF APIs and automatically\n * invalidates related queries when the cache flush date changes, indicating\n * that the underlying data has been updated on the server.\n *\n * This component should be placed high in the component tree, ideally near\n * the root of your application, to ensure all WSF queries are properly\n * invalidated when data changes.\n */\nexport const WsfCacheProvider = () => {\n  const {\n    monitorVesselsCacheFlush,\n    monitorTerminalsCacheFlush,\n    monitorScheduleCacheFlush,\n  } = useWsfCacheFlushMonitor();\n\n  // Cache flush date queries\n  const { data: vesselsCacheFlushDate } = useCacheFlushDateVessels();\n  const { data: terminalsCacheFlushDate } = useCacheFlushDateTerminals();\n  const { data: scheduleCacheFlushDate } = useCacheFlushDateSchedule();\n\n  // Store previous cache flush dates to detect changes\n  const previousVesselsFlushDate = useRef<Date | null>(null);\n  const previousTerminalsFlushDate = useRef<Date | null>(null);\n  const previousScheduleFlushDate = useRef<Date | null>(null);\n\n  // Monitor vessels cache flush date changes\n  useEffect(() => {\n    const currentFlushDate = vesselsCacheFlushDate?.lastUpdated || null;\n    monitorVesselsCacheFlush(\n      previousVesselsFlushDate.current,\n      currentFlushDate\n    );\n    previousVesselsFlushDate.current = currentFlushDate;\n  }, [vesselsCacheFlushDate?.lastUpdated, monitorVesselsCacheFlush]);\n\n  // Monitor terminals cache flush date changes\n  useEffect(() => {\n    const currentFlushDate = terminalsCacheFlushDate?.lastUpdated || null;\n    monitorTerminalsCacheFlush(\n      previousTerminalsFlushDate.current,\n      currentFlushDate\n    );\n    previousTerminalsFlushDate.current = currentFlushDate;\n  }, [terminalsCacheFlushDate?.lastUpdated, monitorTerminalsCacheFlush]);\n\n  // Monitor schedule cache flush date changes\n  useEffect(() => {\n    const currentFlushDate = scheduleCacheFlushDate?.lastUpdated || null;\n    monitorScheduleCacheFlush(\n      previousScheduleFlushDate.current,\n      currentFlushDate\n    );\n    previousScheduleFlushDate.current = currentFlushDate;\n  }, [scheduleCacheFlushDate?.lastUpdated, monitorScheduleCacheFlush]);\n\n  // This component doesn't render anything\n  return null;\n};\n","// WSF API Cache Invalidation Utilities\n// Uses cache flush dates to invalidate queries when data changes\n\nimport { useQueryClient } from \"@tanstack/react-query\";\n\n/**\n * Hook for invalidating WSF queries based on cache flush dates\n *\n * This hook monitors cache flush dates and invalidates related queries\n * when the cache flush date changes, indicating that the underlying data\n * has been updated on the server.\n */\nexport const useWsfCacheInvalidation = () => {\n  const queryClient = useQueryClient();\n\n  /**\n   * Invalidate all vessel-related queries when vessels cache flush date changes\n   */\n  const invalidateVesselQueries = () => {\n    queryClient.invalidateQueries({ queryKey: [\"vessels\"] });\n  };\n\n  /**\n   * Invalidate all terminal-related queries when terminals cache flush date changes\n   */\n  const invalidateTerminalQueries = () => {\n    queryClient.invalidateQueries({ queryKey: [\"terminals\"] });\n  };\n\n  /**\n   * Invalidate all schedule-related queries when schedule cache flush date changes\n   */\n  const invalidateScheduleQueries = () => {\n    queryClient.invalidateQueries({ queryKey: [\"schedule\"] });\n  };\n\n  /**\n   * Invalidate specific vessel queries by type\n   */\n  const invalidateVesselQueriesByType = (\n    type: \"locations\" | \"verbose\" | \"basics\"\n  ) => {\n    queryClient.invalidateQueries({ queryKey: [\"vessels\", type] });\n  };\n\n  /**\n   * Invalidate specific terminal queries by type\n   */\n  const invalidateTerminalQueriesByType = (\n    type: \"sailingSpace\" | \"verbose\" | \"basics\" | \"locations\" | \"waitTimes\"\n  ) => {\n    queryClient.invalidateQueries({ queryKey: [\"terminals\", type] });\n  };\n\n  /**\n   * Invalidate specific schedule queries by type\n   */\n  const invalidateScheduleQueriesByType = (\n    type:\n      | \"routes\"\n      | \"schedules\"\n      | \"terminals\"\n      | \"vessels\"\n      | \"timeAdjustments\"\n      | \"alerts\"\n  ) => {\n    queryClient.invalidateQueries({ queryKey: [\"schedule\", type] });\n  };\n\n  /**\n   * Invalidate all WSF queries (use sparingly)\n   */\n  const invalidateAllWsfQueries = () => {\n    queryClient.invalidateQueries({ queryKey: [\"vessels\"] });\n    queryClient.invalidateQueries({ queryKey: [\"terminals\"] });\n    queryClient.invalidateQueries({ queryKey: [\"schedule\"] });\n  };\n\n  return {\n    invalidateVesselQueries,\n    invalidateTerminalQueries,\n    invalidateScheduleQueries,\n    invalidateVesselQueriesByType,\n    invalidateTerminalQueriesByType,\n    invalidateScheduleQueriesByType,\n    invalidateAllWsfQueries,\n  };\n};\n\n/**\n * Hook for monitoring cache flush dates and automatically invalidating queries\n *\n * This hook should be used in a high-level component to monitor cache flush dates\n * and automatically invalidate related queries when data changes.\n */\nexport const useWsfCacheFlushMonitor = () => {\n  const queryClient = useQueryClient();\n\n  /**\n   * Monitor vessels cache flush date and invalidate vessel queries when it changes\n   */\n  const monitorVesselsCacheFlush = (\n    lastFlushDate: Date | null,\n    currentFlushDate: Date | null\n  ) => {\n    if (\n      lastFlushDate &&\n      currentFlushDate &&\n      lastFlushDate.getTime() !== currentFlushDate.getTime()\n    ) {\n      queryClient.invalidateQueries({ queryKey: [\"vessels\"] });\n    }\n  };\n\n  /**\n   * Monitor terminals cache flush date and invalidate terminal queries when it changes\n   */\n  const monitorTerminalsCacheFlush = (\n    lastFlushDate: Date | null,\n    currentFlushDate: Date | null\n  ) => {\n    if (\n      lastFlushDate &&\n      currentFlushDate &&\n      lastFlushDate.getTime() !== currentFlushDate.getTime()\n    ) {\n      queryClient.invalidateQueries({ queryKey: [\"terminals\"] });\n    }\n  };\n\n  /**\n   * Monitor schedule cache flush date and invalidate schedule queries when it changes\n   */\n  const monitorScheduleCacheFlush = (\n    lastFlushDate: Date | null,\n    currentFlushDate: Date | null\n  ) => {\n    if (\n      lastFlushDate &&\n      currentFlushDate &&\n      lastFlushDate.getTime() !== currentFlushDate.getTime()\n    ) {\n      queryClient.invalidateQueries({ queryKey: [\"schedule\"] });\n    }\n  };\n\n  return {\n    monitorVesselsCacheFlush,\n    monitorTerminalsCacheFlush,\n    monitorScheduleCacheFlush,\n  };\n};\n","import { dehydrate, hydrate } from '@tanstack/query-core'\nimport type {\n  DehydrateOptions,\n  DehydratedState,\n  HydrateOptions,\n  NotifyEventType,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport type Promisable<T> = T | PromiseLike<T>\n\nexport interface Persister {\n  persistClient: (persistClient: PersistedClient) => Promisable<void>\n  restoreClient: () => Promisable<PersistedClient | undefined>\n  removeClient: () => Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClientRootOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persister interface for storing and restoring the cache\n   * to/from a persisted location */\n  persister: Persister\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n}\n\nexport interface PersistedQueryClientRestoreOptions\n  extends PersistQueryClientRootOptions {\n  /** The max-allowed age of the cache in milliseconds.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** The options passed to the hydrate function */\n  hydrateOptions?: HydrateOptions\n}\n\nexport interface PersistedQueryClientSaveOptions\n  extends PersistQueryClientRootOptions {\n  /** The options passed to the dehydrate function */\n  dehydrateOptions?: DehydrateOptions\n}\n\nexport interface PersistQueryClientOptions\n  extends PersistedQueryClientRestoreOptions,\n    PersistedQueryClientSaveOptions,\n    PersistQueryClientRootOptions {}\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */\nconst cacheEventTypes: Array<NotifyEventType> = ['added', 'removed', 'updated']\n\nfunction isCacheEventType(eventType: NotifyEventType) {\n  return cacheEventTypes.includes(eventType)\n}\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientRestoreOptions) {\n  try {\n    const persistedClient = await persister.restoreClient()\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge\n        const busted = persistedClient.buster !== buster\n        if (expired || busted) {\n          return persister.removeClient()\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions)\n        }\n      } else {\n        return persister.removeClient()\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(err)\n      console.warn(\n        'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',\n      )\n    }\n\n    await persister.removeClient()\n\n    throw err\n  }\n}\n\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions),\n  }\n\n  await persister.persistClient(persistClient)\n}\n\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscribe((event) => {\n      if (isCacheEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  const unsubscribeMutationCache = props.queryClient\n    .getMutationCache()\n    .subscribe((event) => {\n      if (isCacheEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  return () => {\n    unsubscribeQueryCache()\n    unsubscribeMutationCache()\n  }\n}\n\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false\n  let persistQueryClientUnsubscribe: (() => void) | undefined\n  const unsubscribe = () => {\n    hasUnsubscribed = true\n    persistQueryClientUnsubscribe?.()\n  }\n\n  // Attempt restore\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props)\n    }\n  })\n\n  return [unsubscribe, restorePromise]\n}\n","export function noop(): void\nexport function noop(): undefined\nexport function noop() {}\n","import { noop } from './utils'\nimport type {\n  PersistRetryer,\n  PersistedClient,\n  Persister,\n} from '@tanstack/query-persist-client-core'\n\ninterface Storage {\n  getItem: (key: string) => string | null\n  setItem: (key: string, value: string) => void\n  removeItem: (key: string) => void\n}\n\ninterface CreateSyncStoragePersisterOptions {\n  /** The storage client used for setting and retrieving items from cache.\n   * For SSR pass in `undefined`. Note that window.localStorage can be\n   * `null` in Android WebViews depending on how they are configured.\n   */\n  storage: Storage | undefined | null\n  /** The key to use when storing the cache */\n  key?: string\n  /** To avoid spamming,\n   * pass a time in ms to throttle saving the cache to disk */\n  throttleTime?: number\n  /**\n   * How to serialize the data to storage.\n   * @default `JSON.stringify`\n   */\n  serialize?: (client: PersistedClient) => string\n  /**\n   * How to deserialize the data from storage.\n   * @default `JSON.parse`\n   */\n  deserialize?: (cachedString: string) => PersistedClient\n\n  retry?: PersistRetryer\n}\n\n/**\n * @deprecated use `createAsyncStoragePersister` from `@tanstack/query-async-storage-persister` instead.\n */\nexport function createSyncStoragePersister({\n  storage,\n  key = `REACT_QUERY_OFFLINE_CACHE`,\n  throttleTime = 1000,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n  retry,\n}: CreateSyncStoragePersisterOptions): Persister {\n  if (storage) {\n    const trySave = (persistedClient: PersistedClient): Error | undefined => {\n      try {\n        storage.setItem(key, serialize(persistedClient))\n        return\n      } catch (error) {\n        return error as Error\n      }\n    }\n    return {\n      persistClient: throttle((persistedClient) => {\n        let client: PersistedClient | undefined = persistedClient\n        let error = trySave(client)\n        let errorCount = 0\n        while (error && client) {\n          errorCount++\n          client = retry?.({\n            persistedClient: client,\n            error,\n            errorCount,\n          })\n\n          if (client) {\n            error = trySave(client)\n          }\n        }\n      }, throttleTime),\n      restoreClient: () => {\n        const cacheString = storage.getItem(key)\n\n        if (!cacheString) {\n          return\n        }\n\n        return deserialize(cacheString)\n      },\n      removeClient: () => {\n        storage.removeItem(key)\n      },\n    }\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: noop,\n    removeClient: noop,\n  }\n}\n\nfunction throttle<TArgs extends Array<any>>(\n  func: (...args: TArgs) => any,\n  wait = 100,\n) {\n  let timer: ReturnType<typeof setTimeout> | null = null\n  let params: TArgs\n  return function (...args: TArgs) {\n    params = args\n    if (timer === null) {\n      timer = setTimeout(() => {\n        func(...params)\n        timer = null\n      }, wait)\n    }\n  }\n}\n","// Persistent QueryClient Setup\n// Configures React Query with localStorage persistence for offline-first experience\n\nimport { persistQueryClient } from \"@tanstack/query-persist-client-core\";\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient, useQueryClient } from \"@tanstack/react-query\";\nimport * as React from \"react\";\n\n/**\n * Create a persistent QueryClient with localStorage persistence\n *\n * This QueryClient will:\n * - Persist all query cache to localStorage\n * - Restore cache on app startup\n * - Keep data for up to 7 days\n * - Provide instant data loading on app restart\n */\nexport const createPersistentQueryClient = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        // Default to infrequent update settings\n        staleTime: 7 * 24 * 60 * 60 * 1000, // 1 week\n        gcTime: 30 * 24 * 60 * 60 * 1000, // 30 days\n        retry: 3,\n        retryDelay: (attemptIndex: number) =>\n          Math.min(1000 * 2 ** attemptIndex, 30000),\n      },\n    },\n  });\n\n  // Only set up persistence on web platform\n  if (typeof window !== \"undefined\") {\n    const persister = createSyncStoragePersister({\n      storage: window.localStorage,\n      key: \"wsf-query-cache\", // Namespace for WSF data\n    });\n\n    persistQueryClient({\n      queryClient,\n      persister,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      buster: \"v1\", // Cache buster for app updates\n    });\n  }\n\n  return queryClient;\n};\n\n/**\n * Hook for invalidating real-time queries on app startup\n *\n * This ensures that real-time data (vessel locations, terminal capacity)\n * gets refreshed immediately after the app starts, while infrequent data\n * (terminal info, vessel specs, schedules) stays cached until cache flush invalidation.\n */\nexport const useStartupRefetch = () => {\n  const queryClient = useQueryClient();\n\n  React.useEffect(() => {\n    // Only refetch real-time data on startup\n    // Infrequent data will be invalidated by cache flush dates when needed\n    queryClient.invalidateQueries({ queryKey: [\"vessels\", \"locations\"] });\n    queryClient.invalidateQueries({ queryKey: [\"terminals\", \"sailingSpace\"] });\n  }, [queryClient]);\n};\n"],"mappings":"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","names":["_a","_a","_cleanup","_setup","_a","_a","queryFnContext","context","_a","_a","_retryer","getDefaultState","dispatch_fn","_a","queryFnContext","_a","_mutationCache","_defaultOptions","_a","_client","React","React","jsx","React","React","useEffect","useEffect","noop","noop","React"]}