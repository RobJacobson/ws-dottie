#!/usr/bin/env node

/**
 * Script to fix malformed markdown tables in API specification files
 * Generated by Doxygen with markdown output issues
 */

const fs = require("fs");
const path = require("path");
const { glob } = require("glob");

/**
 * Fix malformed table headers and structures in markdown content
 */
function fixMarkdownTables(content) {
  let fixed = content;

  // Fix 1: Function signature tables
  // Pattern: |  |  |  |  |  |  |  | followed by | --- | --- | --- | --- | --- | --- |
  fixed = fixed.replace(
    /(\|(?:\s*\|\s*)*)\s*\n(\|(?:\s*---\s*\|\s*)*)\s*\n([\s\S]*?(?=\n\n|\n##|\n#|$))/g,
    (match, pipes, dashes, tableContent) => {
      // Count the number of columns from the dashes
      const columnCount = dashes.split("|").length - 1;

      // Create proper markdown table header
      const headerRow = "|" + " Column |".repeat(columnCount);
      const separatorRow = "|" + " --- |".repeat(columnCount);

      // Fix the table content by ensuring proper column alignment
      const lines = tableContent.split("\n").filter((line) => line.trim());
      const fixedLines = lines.map((line) => {
        // Ensure each line starts and ends with |
        let fixedLine = line.trim();
        if (!fixedLine.startsWith("|")) fixedLine = "|" + fixedLine;
        if (!fixedLine.endsWith("|")) fixedLine = fixedLine + "|";

        // Fix spacing around pipes
        fixedLine = fixedLine.replace(/\s*\|\s*/g, " | ");

        return fixedLine;
      });

      return `${headerRow}\n${separatorRow}\n${fixedLines.join("\n")}\n`;
    }
  );

  // Fix 2: Parameter sections
  // Pattern: Parameters\n:   |  |  |\n    | --- | --- |\n    | ParameterName | Description |
  fixed = fixed.replace(
    /Parameters\s*\n:\s*(\|(?:\s*\|\s*)*)\s*\n\s*(\|(?:\s*---\s*\|\s*)*)\s*\n([\s\S]*?(?=\n\n|\n##|\nReturns|\n#|$))/g,
    (match, pipes, dashes, paramContent) => {
      const headerRow = "| Parameter | Description |";
      const separatorRow = "| --- | --- |";

      // Fix parameter lines
      const lines = paramContent
        .split("\n")
        .filter((line) => line.trim() && line.includes("|"));
      const fixedLines = lines.map((line) => {
        // Extract parameter name and description
        const paramMatch = line.match(/\|\s*([^|]+?)\s*\|\s*(.*?)\s*\|?$/);
        if (paramMatch) {
          const [, paramName, description] = paramMatch;
          return `| ${paramName.trim()} | ${description.trim()} |`;
        }
        return line;
      });

      return `**Parameters:**\n\n${headerRow}\n${separatorRow}\n${fixedLines.join("\n")}\n`;
    }
  );

  // Fix 3: Property documentation tables
  // Pattern: |  |  |  |\n| --- | --- | --- |\n| |  | | --- | | Type PropertyName | | getset |
  fixed = fixed.replace(
    /(\|\s*\|*\s*\n\|(\s*---\s*\|)*\s*\n\|[^|]*\|[^|]*\|[^|]*\|[^|]*\|[^|]*\|[^|]*\|[^|]*\s*\n)/g,
    (match) => {
      // For property tables, convert to a simple list format since they're complex
      return "**Property Documentation:**\n\n";
    }
  );

  // Fix 4: Returns sections
  // Pattern: Returns\n:   Description
  fixed = fixed.replace(
    /Returns\s*\n:\s*(.+?)(?=\n\n|\n##|\n#|$)/g,
    (match, description) => {
      return `**Returns:** ${description.trim()}\n`;
    }
  );

  return fixed;
}

/**
 * Process a single file
 */
function processFile(filePath) {
  try {
    const originalContent = fs.readFileSync(filePath, "utf8");
    const fixedContent = fixMarkdownTables(originalContent);

    if (originalContent !== fixedContent) {
      fs.writeFileSync(filePath, fixedContent);
      console.log(`âœ“ Fixed: ${filePath}`);
      return true;
    } else {
      console.log(`- No changes needed: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.error(`âœ— Error processing ${filePath}:`, error.message);
    return false;
  }
}

/**
 * Main execution
 */
async function main() {
  console.log("ðŸ”§ Starting markdown table fixes...\n");

  // Find all markdown files in the api-specs-wsf directory
  const pattern = "docs/references/api-specs-wsf/**/*.md";
  const files = await glob(pattern);

  console.log(`Found ${files.length} markdown files to process:\n`);

  let fixedCount = 0;
  for (const file of files) {
    if (processFile(file)) {
      fixedCount++;
    }
  }

  console.log(`\nâœ… Completed! Fixed ${fixedCount} of ${files.length} files.`);
}

// Run the script
main().catch(console.error);
