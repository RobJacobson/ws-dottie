/**
 * @fileoverview Auto-Configuration Generator for All APIs
 *
 * This module generates test configurations for all 16 APIs automatically
 * from discovered Endpoint objects, creating comprehensive test configurations
 * that work with the existing test generator patterns.
 */

import type { Endpoint } from "@/shared/endpoints";
import type { ApiModuleConfig } from "./configGenerator";
import { discoverEndpoints, discoverApiNames } from "./endpointDiscovery";
import { generateApiConfig, generateAllApiConfigs } from "./configGenerator";
import { writeFileSync, mkdirSync } from "fs";
import { join } from "path";

/**
 * Configuration for auto-generated files
 */
interface AutoConfigOptions {
  /** Output directory for generated configs */
  outputDir: string;

  /** Whether to include detailed comments */
  includeComments: boolean;

  /** Whether to include custom test scenarios */
  includeCustomTests: boolean;

  /** Whether to validate generated configs */
  validateConfigs: boolean;
}

/**
 * Default options for auto-config generation
 */
const defaultOptions: AutoConfigOptions = {
  outputDir: "tests/e2e/auto-generated",
  includeComments: true,
  includeCustomTests: true,
  validateConfigs: true,
};

/**
 * Generates auto-configuration files for all discovered APIs
 */
export const generateAllAutoConfigs = (
  options: Partial<AutoConfigOptions> = {}
) => {
  const config = { ...defaultOptions, ...options };

  console.log("🔍 Discovering endpoints...");
  const endpoints = discoverEndpoints();
  console.log(`✅ Discovered ${endpoints.length} endpoints`);

  console.log("📊 Discovering API names...");
  const apiNames = discoverApiNames();
  console.log(`✅ Found ${apiNames.length} APIs: ${apiNames.join(", ")}`);

  console.log("⚙️ Generating API configurations...");
  const apiConfigs = generateAllApiConfigs(endpoints);
  console.log(
    `✅ Generated configurations for ${Object.keys(apiConfigs).length} APIs`
  );

  if (config.validateConfigs) {
    console.log("🔍 Validating generated configurations...");
    const validation = validateGeneratedConfigs(apiConfigs);
    if (!validation.isValid) {
      console.error("❌ Configuration validation failed:");
      validation.issues.forEach((issue) => console.error(`  - ${issue}`));
      throw new Error("Configuration validation failed");
    }
    console.log("✅ All configurations validated successfully");
  }

  console.log("📝 Generating auto-config files...");
  generateAutoConfigFiles(apiConfigs, config);
  console.log("✅ Auto-config files generated successfully");

  return {
    endpoints,
    apiNames,
    apiConfigs,
    generatedFiles: Object.keys(apiConfigs).map(
      (apiName) => `${apiName}.config.ts`
    ),
  };
};

/**
 * Generates individual auto-config files for each API
 */
const generateAutoConfigFiles = (
  apiConfigs: Record<string, ApiModuleConfig>,
  options: AutoConfigOptions
) => {
  // Ensure output directory exists
  mkdirSync(options.outputDir, { recursive: true });

  Object.entries(apiConfigs).forEach(([apiName, apiConfig]) => {
    const fileName = `${apiName}.config.ts`;
    const filePath = join(options.outputDir, fileName);

    const fileContent = generateAutoConfigFileContent(
      apiName,
      apiConfig,
      options
    );

    writeFileSync(filePath, fileContent, "utf8");
    console.log(`  📄 Generated ${fileName}`);
  });
};

/**
 * Generates the content for a single auto-config file
 */
const generateAutoConfigFileContent = (
  apiName: string,
  apiConfig: ApiModuleConfig,
  options: AutoConfigOptions
): string => {
  const moduleName = formatApiName(apiName);
  const importPath = `@/clients/${apiName}`;

  let content = "";

  if (options.includeComments) {
    content += `/**
 * @fileoverview Auto-generated test configuration for ${moduleName} API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

`;
  }

  content += `import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";
import { z } from "zod";

// Import the actual endpoint definitions
import * as ${apiName.replace(/-/g, "_")} from "${importPath}";

`;

  // Generate individual endpoint configurations
  apiConfig.endpoints.forEach((endpointConfig, index: number) => {
    const endpointName = endpointConfig.endpointName;
    const configName = `${endpointName}Config`;

    content += `/**
 * Auto-generated test configuration for ${endpointName} endpoint
 */
export const ${configName}: EndpointTestConfig<z.infer<typeof ${apiName.replace(/-/g, "_")}.${endpointName}.inputSchema>, z.infer<typeof ${apiName.replace(/-/g, "_")}.${endpointName}.outputSchema>> = {
  apiFunction: (params: z.infer<typeof ${apiName.replace(/-/g, "_")}.${endpointName}.inputSchema>) => fetchWithZod(${apiName.replace(/-/g, "_")}.${endpointName}, params),
  inputSchema: ${apiName.replace(/-/g, "_")}.${endpointName}.inputSchema,
  outputSchema: ${apiName.replace(/-/g, "_")}.${endpointName}.outputSchema,
  validParams: ${apiName.replace(/-/g, "_")}.${endpointName}.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "${endpointName}",
  category: "${endpointConfig.category}",
  maxResponseTime: ${endpointConfig.maxResponseTime},
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: ${apiName.replace(/-/g, "_")}.${endpointName}.sampleParams || {},
      expectation: "success",
      description: "Validates that ${endpointConfig.endpointDefinition.cacheStrategy} caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: ${apiName.replace(/-/g, "_")}.${endpointName}.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: ${apiName.replace(/-/g, "_")}.${endpointName},
};

`;
  });

  // Generate exports
  const configNames = apiConfig.endpoints.map(
    (ec) => `${ec.endpointName}Config`
  );
  content += `/**
 * All endpoint configurations for this API
 */
export const ${apiName.replace(/-/g, "_")}Configs = [
  ${configNames.join(",\n  ")},
];

/**
 * API module configuration
 */
export const ${apiName.replace(/-/g, "_")}ModuleConfig = {
  moduleName: "${moduleName}",
  endpoints: ${apiName.replace(/-/g, "_")}Configs,
  settings: {
    baseTimeout: ${apiConfig.settings.baseTimeout},
    requiresAuth: ${apiConfig.settings.requiresAuth},
    rateLimit: {
      requestsPerSecond: ${apiConfig.settings.rateLimit?.requestsPerSecond || 10},
      burstLimit: ${apiConfig.settings.rateLimit?.burstLimit || 50},
    },
    testCategories: ${JSON.stringify(apiConfig.settings.testCategories)},
  },
};
`;

  return content;
};

/**
 * Formats API name for display purposes
 */
const formatApiName = (apiName: string): string => {
  return apiName
    .split("-")
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join(" ");
};

/**
 * Validates generated configurations
 */
const validateGeneratedConfigs = (
  configs: Record<string, ApiModuleConfig>
): { isValid: boolean; issues: string[] } => {
  const issues: string[] = [];

  Object.entries(configs).forEach(([apiName, config]) => {
    if (config.endpoints.length === 0) {
      issues.push(`API ${apiName} has no endpoints configured`);
    }

    config.endpoints.forEach((endpoint, index: number) => {
      if (!endpoint.apiFunction) {
        issues.push(`API ${apiName}, endpoint ${index}: missing apiFunction`);
      }

      if (!endpoint.inputSchema || !endpoint.outputSchema) {
        issues.push(`API ${apiName}, endpoint ${index}: missing schemas`);
      }

      if (endpoint.maxResponseTime <= 0) {
        issues.push(
          `API ${apiName}, endpoint ${index}: invalid maxResponseTime`
        );
      }
    });
  });

  return {
    isValid: issues.length === 0,
    issues,
  };
};

/**
 * CLI function to generate all auto-configs
 */
if (require.main === module) {
  try {
    const result = generateAllAutoConfigs();
    console.log("\n🎉 Auto-configuration generation completed successfully!");
    console.log(
      `📊 Generated ${result.generatedFiles.length} configuration files`
    );
    console.log(
      `🔍 Discovered ${result.endpoints.length} endpoints across ${result.apiNames.length} APIs`
    );
  } catch (error) {
    console.error("❌ Auto-configuration generation failed:", error);
    process.exit(1);
  }
}
