/**
 * @fileoverview Auto-generated test configuration for Wsf Terminals API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";
import { z } from "zod";

// Import the actual endpoint definitions
import * as wsf_terminals from "@/clients/wsf-terminals";

/**
 * Auto-generated test configuration for cacheFlushDate endpoint
 */
export const cacheFlushDateConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.cacheFlushDate.inputSchema>, z.infer<typeof wsf_terminals.cacheFlushDate.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.cacheFlushDate.inputSchema>) => fetchWithZod(wsf_terminals.cacheFlushDate, params),
  inputSchema: wsf_terminals.cacheFlushDate.inputSchema,
  outputSchema: wsf_terminals.cacheFlushDate.outputSchema,
  validParams: wsf_terminals.cacheFlushDate.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "cacheFlushDate",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.cacheFlushDate,
};

/**
 * Auto-generated test configuration for terminalBasics endpoint
 */
export const terminalBasicsConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalBasics.inputSchema>, z.infer<typeof wsf_terminals.terminalBasics.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalBasics.inputSchema>) => fetchWithZod(wsf_terminals.terminalBasics, params),
  inputSchema: wsf_terminals.terminalBasics.inputSchema,
  outputSchema: wsf_terminals.terminalBasics.outputSchema,
  validParams: wsf_terminals.terminalBasics.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalBasics",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalBasics.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalBasics.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalBasics,
};

/**
 * Auto-generated test configuration for terminalBasicsById endpoint
 */
export const terminalBasicsByIdConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalBasicsById.inputSchema>, z.infer<typeof wsf_terminals.terminalBasicsById.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalBasicsById.inputSchema>) => fetchWithZod(wsf_terminals.terminalBasicsById, params),
  inputSchema: wsf_terminals.terminalBasicsById.inputSchema,
  outputSchema: wsf_terminals.terminalBasicsById.outputSchema,
  validParams: wsf_terminals.terminalBasicsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalBasicsById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalBasicsById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalBasicsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalBasicsById,
};

/**
 * Auto-generated test configuration for terminalBulletins endpoint
 */
export const terminalBulletinsConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalBulletins.inputSchema>, z.infer<typeof wsf_terminals.terminalBulletins.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalBulletins.inputSchema>) => fetchWithZod(wsf_terminals.terminalBulletins, params),
  inputSchema: wsf_terminals.terminalBulletins.inputSchema,
  outputSchema: wsf_terminals.terminalBulletins.outputSchema,
  validParams: wsf_terminals.terminalBulletins.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalBulletins",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalBulletins.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalBulletins.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalBulletins,
};

/**
 * Auto-generated test configuration for terminalBulletinsById endpoint
 */
export const terminalBulletinsByIdConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalBulletinsById.inputSchema>, z.infer<typeof wsf_terminals.terminalBulletinsById.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalBulletinsById.inputSchema>) => fetchWithZod(wsf_terminals.terminalBulletinsById, params),
  inputSchema: wsf_terminals.terminalBulletinsById.inputSchema,
  outputSchema: wsf_terminals.terminalBulletinsById.outputSchema,
  validParams: wsf_terminals.terminalBulletinsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalBulletinsById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalBulletinsById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalBulletinsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalBulletinsById,
};

/**
 * Auto-generated test configuration for terminalLocations endpoint
 */
export const terminalLocationsConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalLocations.inputSchema>, z.infer<typeof wsf_terminals.terminalLocations.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalLocations.inputSchema>) => fetchWithZod(wsf_terminals.terminalLocations, params),
  inputSchema: wsf_terminals.terminalLocations.inputSchema,
  outputSchema: wsf_terminals.terminalLocations.outputSchema,
  validParams: wsf_terminals.terminalLocations.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalLocations",
  category: "listing",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalLocations.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalLocations.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalLocations,
};

/**
 * Auto-generated test configuration for terminalLocationsById endpoint
 */
export const terminalLocationsByIdConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalLocationsById.inputSchema>, z.infer<typeof wsf_terminals.terminalLocationsById.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalLocationsById.inputSchema>) => fetchWithZod(wsf_terminals.terminalLocationsById, params),
  inputSchema: wsf_terminals.terminalLocationsById.inputSchema,
  outputSchema: wsf_terminals.terminalLocationsById.outputSchema,
  validParams: wsf_terminals.terminalLocationsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalLocationsById",
  category: "listing",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalLocationsById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalLocationsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalLocationsById,
};

/**
 * Auto-generated test configuration for terminalSailingSpace endpoint
 */
export const terminalSailingSpaceConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalSailingSpace.inputSchema>, z.infer<typeof wsf_terminals.terminalSailingSpace.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalSailingSpace.inputSchema>) => fetchWithZod(wsf_terminals.terminalSailingSpace, params),
  inputSchema: wsf_terminals.terminalSailingSpace.inputSchema,
  outputSchema: wsf_terminals.terminalSailingSpace.outputSchema,
  validParams: wsf_terminals.terminalSailingSpace.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalSailingSpace",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalSailingSpace.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalSailingSpace.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalSailingSpace,
};

/**
 * Auto-generated test configuration for terminalSailingSpaceById endpoint
 */
export const terminalSailingSpaceByIdConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalSailingSpaceById.inputSchema>, z.infer<typeof wsf_terminals.terminalSailingSpaceById.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalSailingSpaceById.inputSchema>) => fetchWithZod(wsf_terminals.terminalSailingSpaceById, params),
  inputSchema: wsf_terminals.terminalSailingSpaceById.inputSchema,
  outputSchema: wsf_terminals.terminalSailingSpaceById.outputSchema,
  validParams: wsf_terminals.terminalSailingSpaceById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalSailingSpaceById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalSailingSpaceById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalSailingSpaceById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalSailingSpaceById,
};

/**
 * Auto-generated test configuration for terminalTransports endpoint
 */
export const terminalTransportsConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalTransports.inputSchema>, z.infer<typeof wsf_terminals.terminalTransports.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalTransports.inputSchema>) => fetchWithZod(wsf_terminals.terminalTransports, params),
  inputSchema: wsf_terminals.terminalTransports.inputSchema,
  outputSchema: wsf_terminals.terminalTransports.outputSchema,
  validParams: wsf_terminals.terminalTransports.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalTransports",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalTransports.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalTransports.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalTransports,
};

/**
 * Auto-generated test configuration for terminalTransportsById endpoint
 */
export const terminalTransportsByIdConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalTransportsById.inputSchema>, z.infer<typeof wsf_terminals.terminalTransportsById.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalTransportsById.inputSchema>) => fetchWithZod(wsf_terminals.terminalTransportsById, params),
  inputSchema: wsf_terminals.terminalTransportsById.inputSchema,
  outputSchema: wsf_terminals.terminalTransportsById.outputSchema,
  validParams: wsf_terminals.terminalTransportsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalTransportsById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalTransportsById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalTransportsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalTransportsById,
};

/**
 * Auto-generated test configuration for terminalVerbose endpoint
 */
export const terminalVerboseConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalVerbose.inputSchema>, z.infer<typeof wsf_terminals.terminalVerbose.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalVerbose.inputSchema>) => fetchWithZod(wsf_terminals.terminalVerbose, params),
  inputSchema: wsf_terminals.terminalVerbose.inputSchema,
  outputSchema: wsf_terminals.terminalVerbose.outputSchema,
  validParams: wsf_terminals.terminalVerbose.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalVerbose",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalVerbose.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalVerbose.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalVerbose,
};

/**
 * Auto-generated test configuration for terminalVerboseById endpoint
 */
export const terminalVerboseByIdConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalVerboseById.inputSchema>, z.infer<typeof wsf_terminals.terminalVerboseById.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalVerboseById.inputSchema>) => fetchWithZod(wsf_terminals.terminalVerboseById, params),
  inputSchema: wsf_terminals.terminalVerboseById.inputSchema,
  outputSchema: wsf_terminals.terminalVerboseById.outputSchema,
  validParams: wsf_terminals.terminalVerboseById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalVerboseById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalVerboseById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalVerboseById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalVerboseById,
};

/**
 * Auto-generated test configuration for terminalWaitTimes endpoint
 */
export const terminalWaitTimesConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalWaitTimes.inputSchema>, z.infer<typeof wsf_terminals.terminalWaitTimes.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalWaitTimes.inputSchema>) => fetchWithZod(wsf_terminals.terminalWaitTimes, params),
  inputSchema: wsf_terminals.terminalWaitTimes.inputSchema,
  outputSchema: wsf_terminals.terminalWaitTimes.outputSchema,
  validParams: wsf_terminals.terminalWaitTimes.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalWaitTimes",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalWaitTimes.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalWaitTimes.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalWaitTimes,
};

/**
 * Auto-generated test configuration for terminalWaitTimesById endpoint
 */
export const terminalWaitTimesByIdConfig: EndpointTestConfig<z.infer<typeof wsf_terminals.terminalWaitTimesById.inputSchema>, z.infer<typeof wsf_terminals.terminalWaitTimesById.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_terminals.terminalWaitTimesById.inputSchema>) => fetchWithZod(wsf_terminals.terminalWaitTimesById, params),
  inputSchema: wsf_terminals.terminalWaitTimesById.inputSchema,
  outputSchema: wsf_terminals.terminalWaitTimesById.outputSchema,
  validParams: wsf_terminals.terminalWaitTimesById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalWaitTimesById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_terminals.terminalWaitTimesById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_terminals.terminalWaitTimesById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_terminals.terminalWaitTimesById,
};

/**
 * All endpoint configurations for this API
 */
export const wsf_terminalsConfigs = [
  cacheFlushDateConfig,
  terminalBasicsConfig,
  terminalBasicsByIdConfig,
  terminalBulletinsConfig,
  terminalBulletinsByIdConfig,
  terminalLocationsConfig,
  terminalLocationsByIdConfig,
  terminalSailingSpaceConfig,
  terminalSailingSpaceByIdConfig,
  terminalTransportsConfig,
  terminalTransportsByIdConfig,
  terminalVerboseConfig,
  terminalVerboseByIdConfig,
  terminalWaitTimesConfig,
  terminalWaitTimesByIdConfig,
];

/**
 * API module configuration
 */
export const wsf_terminalsModuleConfig = {
  moduleName: "Wsf Terminals",
  endpoints: wsf_terminalsConfigs,
  settings: {
    baseTimeout: 30000,
    requiresAuth: false,
    rateLimit: {
      requestsPerSecond: 5,
      burstLimit: 20,
    },
    testCategories: ["data-retrieval","validation","performance"],
  },
};
