/**
 * @fileoverview Auto-generated test configuration for Wsf Schedule API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";
import { z } from "zod";

// Import the actual endpoint definitions
import * as wsf_schedule from "@/clients/wsf-schedule";

/**
 * Auto-generated test configuration for activeSeasons endpoint
 */
export const activeSeasonsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.activeSeasons.inputSchema>, z.infer<typeof wsf_schedule.activeSeasons.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.activeSeasons.inputSchema>) => fetchWithZod(wsf_schedule.activeSeasons, params),
  inputSchema: wsf_schedule.activeSeasons.inputSchema,
  outputSchema: wsf_schedule.activeSeasons.outputSchema,
  validParams: wsf_schedule.activeSeasons.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "activeSeasons",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.activeSeasons.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.activeSeasons.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.activeSeasons,
};

/**
 * Auto-generated test configuration for allSailings endpoint
 */
export const allSailingsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.allSailings.inputSchema>, z.infer<typeof wsf_schedule.allSailings.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.allSailings.inputSchema>) => fetchWithZod(wsf_schedule.allSailings, params),
  inputSchema: wsf_schedule.allSailings.inputSchema,
  outputSchema: wsf_schedule.allSailings.outputSchema,
  validParams: wsf_schedule.allSailings.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "allSailings",
  category: "listing",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.allSailings.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.allSailings.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.allSailings,
};

/**
 * Auto-generated test configuration for cacheFlushDate endpoint
 */
export const cacheFlushDateConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.cacheFlushDate.inputSchema>, z.infer<typeof wsf_schedule.cacheFlushDate.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.cacheFlushDate.inputSchema>) => fetchWithZod(wsf_schedule.cacheFlushDate, params),
  inputSchema: wsf_schedule.cacheFlushDate.inputSchema,
  outputSchema: wsf_schedule.cacheFlushDate.outputSchema,
  validParams: wsf_schedule.cacheFlushDate.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "cacheFlushDate",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.cacheFlushDate,
};

/**
 * Auto-generated test configuration for routeDetails endpoint
 */
export const routeDetailsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.routeDetails.inputSchema>, z.infer<typeof wsf_schedule.routeDetails.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.routeDetails.inputSchema>) => fetchWithZod(wsf_schedule.routeDetails, params),
  inputSchema: wsf_schedule.routeDetails.inputSchema,
  outputSchema: wsf_schedule.routeDetails.outputSchema,
  validParams: wsf_schedule.routeDetails.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "routeDetails",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.routeDetails.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.routeDetails.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.routeDetails,
};

/**
 * Auto-generated test configuration for routeDetailsByRoute endpoint
 */
export const routeDetailsByRouteConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.routeDetailsByRoute.inputSchema>, z.infer<typeof wsf_schedule.routeDetailsByRoute.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.routeDetailsByRoute.inputSchema>) => fetchWithZod(wsf_schedule.routeDetailsByRoute, params),
  inputSchema: wsf_schedule.routeDetailsByRoute.inputSchema,
  outputSchema: wsf_schedule.routeDetailsByRoute.outputSchema,
  validParams: wsf_schedule.routeDetailsByRoute.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "routeDetailsByRoute",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.routeDetailsByRoute.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.routeDetailsByRoute.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.routeDetailsByRoute,
};

/**
 * Auto-generated test configuration for routeDetailsByTerminals endpoint
 */
export const routeDetailsByTerminalsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.routeDetailsByTerminals.inputSchema>, z.infer<typeof wsf_schedule.routeDetailsByTerminals.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.routeDetailsByTerminals.inputSchema>) => fetchWithZod(wsf_schedule.routeDetailsByTerminals, params),
  inputSchema: wsf_schedule.routeDetailsByTerminals.inputSchema,
  outputSchema: wsf_schedule.routeDetailsByTerminals.outputSchema,
  validParams: wsf_schedule.routeDetailsByTerminals.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "routeDetailsByTerminals",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.routeDetailsByTerminals.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.routeDetailsByTerminals.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.routeDetailsByTerminals,
};

/**
 * Auto-generated test configuration for routes endpoint
 */
export const routesConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.routes.inputSchema>, z.infer<typeof wsf_schedule.routes.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.routes.inputSchema>) => fetchWithZod(wsf_schedule.routes, params),
  inputSchema: wsf_schedule.routes.inputSchema,
  outputSchema: wsf_schedule.routes.outputSchema,
  validParams: wsf_schedule.routes.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "routes",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.routes.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.routes.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.routes,
};

/**
 * Auto-generated test configuration for routesByTerminals endpoint
 */
export const routesByTerminalsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.routesByTerminals.inputSchema>, z.infer<typeof wsf_schedule.routesByTerminals.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.routesByTerminals.inputSchema>) => fetchWithZod(wsf_schedule.routesByTerminals, params),
  inputSchema: wsf_schedule.routesByTerminals.inputSchema,
  outputSchema: wsf_schedule.routesByTerminals.outputSchema,
  validParams: wsf_schedule.routesByTerminals.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "routesByTerminals",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.routesByTerminals.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.routesByTerminals.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.routesByTerminals,
};

/**
 * Auto-generated test configuration for routesHavingServiceDisruptions endpoint
 */
export const routesHavingServiceDisruptionsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.routesHavingServiceDisruptions.inputSchema>, z.infer<typeof wsf_schedule.routesHavingServiceDisruptions.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.routesHavingServiceDisruptions.inputSchema>) => fetchWithZod(wsf_schedule.routesHavingServiceDisruptions, params),
  inputSchema: wsf_schedule.routesHavingServiceDisruptions.inputSchema,
  outputSchema: wsf_schedule.routesHavingServiceDisruptions.outputSchema,
  validParams: wsf_schedule.routesHavingServiceDisruptions.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "routesHavingServiceDisruptions",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.routesHavingServiceDisruptions.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.routesHavingServiceDisruptions.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.routesHavingServiceDisruptions,
};

/**
 * Auto-generated test configuration for routesWithDisruptions endpoint
 */
export const routesWithDisruptionsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.routesWithDisruptions.inputSchema>, z.infer<typeof wsf_schedule.routesWithDisruptions.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.routesWithDisruptions.inputSchema>) => fetchWithZod(wsf_schedule.routesWithDisruptions, params),
  inputSchema: wsf_schedule.routesWithDisruptions.inputSchema,
  outputSchema: wsf_schedule.routesWithDisruptions.outputSchema,
  validParams: wsf_schedule.routesWithDisruptions.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "routesWithDisruptions",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.routesWithDisruptions.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.routesWithDisruptions.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.routesWithDisruptions,
};

/**
 * Auto-generated test configuration for sailings endpoint
 */
export const sailingsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.sailings.inputSchema>, z.infer<typeof wsf_schedule.sailings.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.sailings.inputSchema>) => fetchWithZod(wsf_schedule.sailings, params),
  inputSchema: wsf_schedule.sailings.inputSchema,
  outputSchema: wsf_schedule.sailings.outputSchema,
  validParams: wsf_schedule.sailings.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "sailings",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.sailings.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.sailings.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.sailings,
};

/**
 * Auto-generated test configuration for scheduleAlerts endpoint
 */
export const scheduleAlertsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduleAlerts.inputSchema>, z.infer<typeof wsf_schedule.scheduleAlerts.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduleAlerts.inputSchema>) => fetchWithZod(wsf_schedule.scheduleAlerts, params),
  inputSchema: wsf_schedule.scheduleAlerts.inputSchema,
  outputSchema: wsf_schedule.scheduleAlerts.outputSchema,
  validParams: wsf_schedule.scheduleAlerts.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduleAlerts",
  category: "alerts",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduleAlerts.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduleAlerts.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduleAlerts,
};

/**
 * Auto-generated test configuration for scheduleByRoute endpoint
 */
export const scheduleByRouteConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduleByRoute.inputSchema>, z.infer<typeof wsf_schedule.scheduleByRoute.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduleByRoute.inputSchema>) => fetchWithZod(wsf_schedule.scheduleByRoute, params),
  inputSchema: wsf_schedule.scheduleByRoute.inputSchema,
  outputSchema: wsf_schedule.scheduleByRoute.outputSchema,
  validParams: wsf_schedule.scheduleByRoute.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduleByRoute",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduleByRoute.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduleByRoute.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduleByRoute,
};

/**
 * Auto-generated test configuration for scheduleByTerminals endpoint
 */
export const scheduleByTerminalsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduleByTerminals.inputSchema>, z.infer<typeof wsf_schedule.scheduleByTerminals.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduleByTerminals.inputSchema>) => fetchWithZod(wsf_schedule.scheduleByTerminals, params),
  inputSchema: wsf_schedule.scheduleByTerminals.inputSchema,
  outputSchema: wsf_schedule.scheduleByTerminals.outputSchema,
  validParams: wsf_schedule.scheduleByTerminals.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduleByTerminals",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduleByTerminals.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduleByTerminals.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduleByTerminals,
};

/**
 * Auto-generated test configuration for scheduledRoutes endpoint
 */
export const scheduledRoutesConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduledRoutes.inputSchema>, z.infer<typeof wsf_schedule.scheduledRoutes.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduledRoutes.inputSchema>) => fetchWithZod(wsf_schedule.scheduledRoutes, params),
  inputSchema: wsf_schedule.scheduledRoutes.inputSchema,
  outputSchema: wsf_schedule.scheduledRoutes.outputSchema,
  validParams: wsf_schedule.scheduledRoutes.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduledRoutes",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduledRoutes.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduledRoutes.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduledRoutes,
};

/**
 * Auto-generated test configuration for scheduledRoutesBySeason endpoint
 */
export const scheduledRoutesBySeasonConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduledRoutesBySeason.inputSchema>, z.infer<typeof wsf_schedule.scheduledRoutesBySeason.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduledRoutesBySeason.inputSchema>) => fetchWithZod(wsf_schedule.scheduledRoutesBySeason, params),
  inputSchema: wsf_schedule.scheduledRoutesBySeason.inputSchema,
  outputSchema: wsf_schedule.scheduledRoutesBySeason.outputSchema,
  validParams: wsf_schedule.scheduledRoutesBySeason.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduledRoutesBySeason",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduledRoutesBySeason.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduledRoutesBySeason.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduledRoutesBySeason,
};

/**
 * Auto-generated test configuration for scheduleTodayByRoute endpoint
 */
export const scheduleTodayByRouteConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduleTodayByRoute.inputSchema>, z.infer<typeof wsf_schedule.scheduleTodayByRoute.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduleTodayByRoute.inputSchema>) => fetchWithZod(wsf_schedule.scheduleTodayByRoute, params),
  inputSchema: wsf_schedule.scheduleTodayByRoute.inputSchema,
  outputSchema: wsf_schedule.scheduleTodayByRoute.outputSchema,
  validParams: wsf_schedule.scheduleTodayByRoute.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduleTodayByRoute",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduleTodayByRoute.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduleTodayByRoute.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduleTodayByRoute,
};

/**
 * Auto-generated test configuration for scheduleTodayByTerminals endpoint
 */
export const scheduleTodayByTerminalsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduleTodayByTerminals.inputSchema>, z.infer<typeof wsf_schedule.scheduleTodayByTerminals.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduleTodayByTerminals.inputSchema>) => fetchWithZod(wsf_schedule.scheduleTodayByTerminals, params),
  inputSchema: wsf_schedule.scheduleTodayByTerminals.inputSchema,
  outputSchema: wsf_schedule.scheduleTodayByTerminals.outputSchema,
  validParams: wsf_schedule.scheduleTodayByTerminals.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduleTodayByTerminals",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduleTodayByTerminals.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduleTodayByTerminals.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduleTodayByTerminals,
};

/**
 * Auto-generated test configuration for scheduleValidDateRange endpoint
 */
export const scheduleValidDateRangeConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.scheduleValidDateRange.inputSchema>, z.infer<typeof wsf_schedule.scheduleValidDateRange.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.scheduleValidDateRange.inputSchema>) => fetchWithZod(wsf_schedule.scheduleValidDateRange, params),
  inputSchema: wsf_schedule.scheduleValidDateRange.inputSchema,
  outputSchema: wsf_schedule.scheduleValidDateRange.outputSchema,
  validParams: wsf_schedule.scheduleValidDateRange.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "scheduleValidDateRange",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.scheduleValidDateRange.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.scheduleValidDateRange.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.scheduleValidDateRange,
};

/**
 * Auto-generated test configuration for terminalMates endpoint
 */
export const terminalMatesConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.terminalMates.inputSchema>, z.infer<typeof wsf_schedule.terminalMates.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.terminalMates.inputSchema>) => fetchWithZod(wsf_schedule.terminalMates, params),
  inputSchema: wsf_schedule.terminalMates.inputSchema,
  outputSchema: wsf_schedule.terminalMates.outputSchema,
  validParams: wsf_schedule.terminalMates.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalMates",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.terminalMates.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.terminalMates.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.terminalMates,
};

/**
 * Auto-generated test configuration for terminals endpoint
 */
export const terminalsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.terminals.inputSchema>, z.infer<typeof wsf_schedule.terminals.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.terminals.inputSchema>) => fetchWithZod(wsf_schedule.terminals, params),
  inputSchema: wsf_schedule.terminals.inputSchema,
  outputSchema: wsf_schedule.terminals.outputSchema,
  validParams: wsf_schedule.terminals.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminals",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.terminals.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.terminals.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.terminals,
};

/**
 * Auto-generated test configuration for terminalsAndMates endpoint
 */
export const terminalsAndMatesConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.terminalsAndMates.inputSchema>, z.infer<typeof wsf_schedule.terminalsAndMates.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.terminalsAndMates.inputSchema>) => fetchWithZod(wsf_schedule.terminalsAndMates, params),
  inputSchema: wsf_schedule.terminalsAndMates.inputSchema,
  outputSchema: wsf_schedule.terminalsAndMates.outputSchema,
  validParams: wsf_schedule.terminalsAndMates.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalsAndMates",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.terminalsAndMates.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.terminalsAndMates.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.terminalsAndMates,
};

/**
 * Auto-generated test configuration for terminalsAndMatesByRoute endpoint
 */
export const terminalsAndMatesByRouteConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.terminalsAndMatesByRoute.inputSchema>, z.infer<typeof wsf_schedule.terminalsAndMatesByRoute.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.terminalsAndMatesByRoute.inputSchema>) => fetchWithZod(wsf_schedule.terminalsAndMatesByRoute, params),
  inputSchema: wsf_schedule.terminalsAndMatesByRoute.inputSchema,
  outputSchema: wsf_schedule.terminalsAndMatesByRoute.outputSchema,
  validParams: wsf_schedule.terminalsAndMatesByRoute.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalsAndMatesByRoute",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.terminalsAndMatesByRoute.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.terminalsAndMatesByRoute.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.terminalsAndMatesByRoute,
};

/**
 * Auto-generated test configuration for timeAdjustments endpoint
 */
export const timeAdjustmentsConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.timeAdjustments.inputSchema>, z.infer<typeof wsf_schedule.timeAdjustments.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.timeAdjustments.inputSchema>) => fetchWithZod(wsf_schedule.timeAdjustments, params),
  inputSchema: wsf_schedule.timeAdjustments.inputSchema,
  outputSchema: wsf_schedule.timeAdjustments.outputSchema,
  validParams: wsf_schedule.timeAdjustments.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "timeAdjustments",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.timeAdjustments.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.timeAdjustments.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.timeAdjustments,
};

/**
 * Auto-generated test configuration for timeAdjustmentsByRoute endpoint
 */
export const timeAdjustmentsByRouteConfig: EndpointTestConfig<z.infer<typeof wsf_schedule.timeAdjustmentsByRoute.inputSchema>, z.infer<typeof wsf_schedule.timeAdjustmentsByRoute.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsf_schedule.timeAdjustmentsByRoute.inputSchema>) => fetchWithZod(wsf_schedule.timeAdjustmentsByRoute, params),
  inputSchema: wsf_schedule.timeAdjustmentsByRoute.inputSchema,
  outputSchema: wsf_schedule.timeAdjustmentsByRoute.outputSchema,
  validParams: wsf_schedule.timeAdjustmentsByRoute.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "timeAdjustmentsByRoute",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_schedule.timeAdjustmentsByRoute.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_schedule.timeAdjustmentsByRoute.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_schedule.timeAdjustmentsByRoute,
};

/**
 * All endpoint configurations for this API
 */
export const wsf_scheduleConfigs = [
  activeSeasonsConfig,
  allSailingsConfig,
  cacheFlushDateConfig,
  routeDetailsConfig,
  routeDetailsByRouteConfig,
  routeDetailsByTerminalsConfig,
  routesConfig,
  routesByTerminalsConfig,
  routesHavingServiceDisruptionsConfig,
  routesWithDisruptionsConfig,
  sailingsConfig,
  scheduleAlertsConfig,
  scheduleByRouteConfig,
  scheduleByTerminalsConfig,
  scheduledRoutesConfig,
  scheduledRoutesBySeasonConfig,
  scheduleTodayByRouteConfig,
  scheduleTodayByTerminalsConfig,
  scheduleValidDateRangeConfig,
  terminalMatesConfig,
  terminalsConfig,
  terminalsAndMatesConfig,
  terminalsAndMatesByRouteConfig,
  timeAdjustmentsConfig,
  timeAdjustmentsByRouteConfig,
];

/**
 * API module configuration
 */
export const wsf_scheduleModuleConfig = {
  moduleName: "Wsf Schedule",
  endpoints: wsf_scheduleConfigs,
  settings: {
    baseTimeout: 30000,
    requiresAuth: false,
    rateLimit: {
      requestsPerSecond: 5,
      burstLimit: 20,
    },
    testCategories: ["data-retrieval","validation","performance"],
  },
};
