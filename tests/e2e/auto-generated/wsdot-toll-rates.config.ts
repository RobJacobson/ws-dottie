/**
 * @fileoverview Auto-generated test configuration for Wsdot Toll Rates API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";
import { z } from "zod";

// Import the actual endpoint definitions
import * as wsdot_toll_rates from "@/clients/wsdot-toll-rates";

/**
 * Auto-generated test configuration for getTollRates endpoint
 */
export const getTollRatesConfig: EndpointTestConfig<z.infer<typeof wsdot_toll_rates.getTollRates.inputSchema>, z.infer<typeof wsdot_toll_rates.getTollRates.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsdot_toll_rates.getTollRates.inputSchema>) => fetchWithZod(wsdot_toll_rates.getTollRates, params),
  inputSchema: wsdot_toll_rates.getTollRates.inputSchema,
  outputSchema: wsdot_toll_rates.getTollRates.outputSchema,
  validParams: wsdot_toll_rates.getTollRates.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getTollRates",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_toll_rates.getTollRates.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_toll_rates.getTollRates.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_toll_rates.getTollRates,
};

/**
 * Auto-generated test configuration for getTollTripInfo endpoint
 */
export const getTollTripInfoConfig: EndpointTestConfig<z.infer<typeof wsdot_toll_rates.getTollTripInfo.inputSchema>, z.infer<typeof wsdot_toll_rates.getTollTripInfo.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsdot_toll_rates.getTollTripInfo.inputSchema>) => fetchWithZod(wsdot_toll_rates.getTollTripInfo, params),
  inputSchema: wsdot_toll_rates.getTollTripInfo.inputSchema,
  outputSchema: wsdot_toll_rates.getTollTripInfo.outputSchema,
  validParams: wsdot_toll_rates.getTollTripInfo.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getTollTripInfo",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_toll_rates.getTollTripInfo.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_toll_rates.getTollTripInfo.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_toll_rates.getTollTripInfo,
};

/**
 * Auto-generated test configuration for getTollTripRates endpoint
 */
export const getTollTripRatesConfig: EndpointTestConfig<z.infer<typeof wsdot_toll_rates.getTollTripRates.inputSchema>, z.infer<typeof wsdot_toll_rates.getTollTripRates.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsdot_toll_rates.getTollTripRates.inputSchema>) => fetchWithZod(wsdot_toll_rates.getTollTripRates, params),
  inputSchema: wsdot_toll_rates.getTollTripRates.inputSchema,
  outputSchema: wsdot_toll_rates.getTollTripRates.outputSchema,
  validParams: wsdot_toll_rates.getTollTripRates.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getTollTripRates",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_toll_rates.getTollTripRates.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_toll_rates.getTollTripRates.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_toll_rates.getTollTripRates,
};

/**
 * Auto-generated test configuration for getTollTripVersion endpoint
 */
export const getTollTripVersionConfig: EndpointTestConfig<z.infer<typeof wsdot_toll_rates.getTollTripVersion.inputSchema>, z.infer<typeof wsdot_toll_rates.getTollTripVersion.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsdot_toll_rates.getTollTripVersion.inputSchema>) => fetchWithZod(wsdot_toll_rates.getTollTripVersion, params),
  inputSchema: wsdot_toll_rates.getTollTripVersion.inputSchema,
  outputSchema: wsdot_toll_rates.getTollTripVersion.outputSchema,
  validParams: wsdot_toll_rates.getTollTripVersion.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getTollTripVersion",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_toll_rates.getTollTripVersion.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_toll_rates.getTollTripVersion.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_toll_rates.getTollTripVersion,
};

/**
 * Auto-generated test configuration for getTripRatesByDate endpoint
 */
export const getTripRatesByDateConfig: EndpointTestConfig<z.infer<typeof wsdot_toll_rates.getTripRatesByDate.inputSchema>, z.infer<typeof wsdot_toll_rates.getTripRatesByDate.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsdot_toll_rates.getTripRatesByDate.inputSchema>) => fetchWithZod(wsdot_toll_rates.getTripRatesByDate, params),
  inputSchema: wsdot_toll_rates.getTripRatesByDate.inputSchema,
  outputSchema: wsdot_toll_rates.getTripRatesByDate.outputSchema,
  validParams: wsdot_toll_rates.getTripRatesByDate.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getTripRatesByDate",
  category: "data-retrieval",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_toll_rates.getTripRatesByDate.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_toll_rates.getTripRatesByDate.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_toll_rates.getTripRatesByDate,
};

/**
 * Auto-generated test configuration for getTripRatesByVersion endpoint
 */
export const getTripRatesByVersionConfig: EndpointTestConfig<z.infer<typeof wsdot_toll_rates.getTripRatesByVersion.inputSchema>, z.infer<typeof wsdot_toll_rates.getTripRatesByVersion.outputSchema>> = {
  apiFunction: (params: z.infer<typeof wsdot_toll_rates.getTripRatesByVersion.inputSchema>) => fetchWithZod(wsdot_toll_rates.getTripRatesByVersion, params),
  inputSchema: wsdot_toll_rates.getTripRatesByVersion.inputSchema,
  outputSchema: wsdot_toll_rates.getTripRatesByVersion.outputSchema,
  validParams: wsdot_toll_rates.getTripRatesByVersion.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getTripRatesByVersion",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_toll_rates.getTripRatesByVersion.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_toll_rates.getTripRatesByVersion.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_toll_rates.getTripRatesByVersion,
};

/**
 * All endpoint configurations for this API
 */
export const wsdot_toll_ratesConfigs = [
  getTollRatesConfig,
  getTollTripInfoConfig,
  getTollTripRatesConfig,
  getTollTripVersionConfig,
  getTripRatesByDateConfig,
  getTripRatesByVersionConfig,
];

/**
 * API module configuration
 */
export const wsdot_toll_ratesModuleConfig = {
  moduleName: "Wsdot Toll Rates",
  endpoints: wsdot_toll_ratesConfigs,
  settings: {
    baseTimeout: 30000,
    requiresAuth: false,
    rateLimit: {
      requestsPerSecond: 10,
      burstLimit: 50,
    },
    testCategories: ["data-retrieval","validation","performance"],
  },
};
