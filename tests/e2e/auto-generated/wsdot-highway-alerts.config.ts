/**
 * @fileoverview Auto-generated test configuration for Wsdot Highway Alerts API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";

// Import the actual endpoint definitions
import * as wsdot_highway_alerts from "@/clients/wsdot-highway-alerts";

/**
 * Auto-generated test configuration for getAlert endpoint
 */
export const getAlertConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_highway_alerts.getAlert, params),
  inputSchema: wsdot_highway_alerts.getAlert.inputSchema,
  outputSchema: wsdot_highway_alerts.getAlert.outputSchema,
  validParams: wsdot_highway_alerts.getAlert.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getAlert",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_highway_alerts.getAlert.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_highway_alerts.getAlert.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_highway_alerts.getAlert,
};

/**
 * Auto-generated test configuration for getAlerts endpoint
 */
export const getAlertsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_highway_alerts.getAlerts, params),
  inputSchema: wsdot_highway_alerts.getAlerts.inputSchema,
  outputSchema: wsdot_highway_alerts.getAlerts.outputSchema,
  validParams: wsdot_highway_alerts.getAlerts.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getAlerts",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_highway_alerts.getAlerts.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_highway_alerts.getAlerts.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_highway_alerts.getAlerts,
};

/**
 * Auto-generated test configuration for getAlertsByRegionId endpoint
 */
export const getAlertsByRegionIdConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_highway_alerts.getAlertsByRegionId, params),
  inputSchema: wsdot_highway_alerts.getAlertsByRegionId.inputSchema,
  outputSchema: wsdot_highway_alerts.getAlertsByRegionId.outputSchema,
  validParams: wsdot_highway_alerts.getAlertsByRegionId.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getAlertsByRegionId",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_highway_alerts.getAlertsByRegionId.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_highway_alerts.getAlertsByRegionId.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_highway_alerts.getAlertsByRegionId,
};

/**
 * Auto-generated test configuration for getAlertsForMapArea endpoint
 */
export const getAlertsForMapAreaConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_highway_alerts.getAlertsForMapArea, params),
  inputSchema: wsdot_highway_alerts.getAlertsForMapArea.inputSchema,
  outputSchema: wsdot_highway_alerts.getAlertsForMapArea.outputSchema,
  validParams: wsdot_highway_alerts.getAlertsForMapArea.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getAlertsForMapArea",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_highway_alerts.getAlertsForMapArea.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_highway_alerts.getAlertsForMapArea.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_highway_alerts.getAlertsForMapArea,
};

/**
 * Auto-generated test configuration for getEventCategories endpoint
 */
export const getEventCategoriesConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_highway_alerts.getEventCategories, params),
  inputSchema: wsdot_highway_alerts.getEventCategories.inputSchema,
  outputSchema: wsdot_highway_alerts.getEventCategories.outputSchema,
  validParams: wsdot_highway_alerts.getEventCategories.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getEventCategories",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_highway_alerts.getEventCategories.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_highway_alerts.getEventCategories.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_highway_alerts.getEventCategories,
};

/**
 * Auto-generated test configuration for getMapAreas endpoint
 */
export const getMapAreasConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_highway_alerts.getMapAreas, params),
  inputSchema: wsdot_highway_alerts.getMapAreas.inputSchema,
  outputSchema: wsdot_highway_alerts.getMapAreas.outputSchema,
  validParams: wsdot_highway_alerts.getMapAreas.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getMapAreas",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_highway_alerts.getMapAreas.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_highway_alerts.getMapAreas.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_highway_alerts.getMapAreas,
};

/**
 * Auto-generated test configuration for searchAlerts endpoint
 */
export const searchAlertsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_highway_alerts.searchAlerts, params),
  inputSchema: wsdot_highway_alerts.searchAlerts.inputSchema,
  outputSchema: wsdot_highway_alerts.searchAlerts.outputSchema,
  validParams: wsdot_highway_alerts.searchAlerts.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "searchAlerts",
  category: "search",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_highway_alerts.searchAlerts.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_highway_alerts.searchAlerts.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_highway_alerts.searchAlerts,
};

/**
 * All endpoint configurations for this API
 */
export const wsdot_highway_alertsConfigs = [
  getAlertConfig,
  getAlertsConfig,
  getAlertsByRegionIdConfig,
  getAlertsForMapAreaConfig,
  getEventCategoriesConfig,
  getMapAreasConfig,
  searchAlertsConfig,
];

/**
 * API module configuration
 */
export const wsdot_highway_alertsModuleConfig = {
  moduleName: "Wsdot Highway Alerts",
  endpoints: wsdot_highway_alertsConfigs,
  settings: {
    baseTimeout: 30000,
    requiresAuth: false,
    rateLimit: {
      requestsPerSecond: 10,
      burstLimit: 50,
    },
    testCategories: ["data-retrieval","validation","performance"],
  },
};
