/**
 * @fileoverview Auto-generated test configuration for Wsdot Weather Information API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";

// Import the actual endpoint definitions
import * as wsdot_weather_information from "@/clients/wsdot-weather-information";

/**
 * Auto-generated test configuration for getWeatherInformation endpoint
 */
export const getWeatherInformationConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_weather_information.getWeatherInformation, params),
  inputSchema: wsdot_weather_information.getWeatherInformation.inputSchema,
  outputSchema: wsdot_weather_information.getWeatherInformation.outputSchema,
  validParams: wsdot_weather_information.getWeatherInformation.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getWeatherInformation",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_weather_information.getWeatherInformation.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_weather_information.getWeatherInformation.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_weather_information.getWeatherInformation,
};

/**
 * Auto-generated test configuration for getWeatherInformationByStationId endpoint
 */
export const getWeatherInformationByStationIdConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsdot_weather_information.getWeatherInformationByStationId, params),
  inputSchema: wsdot_weather_information.getWeatherInformationByStationId.inputSchema,
  outputSchema: wsdot_weather_information.getWeatherInformationByStationId.outputSchema,
  validParams: wsdot_weather_information.getWeatherInformationByStationId.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "getWeatherInformationByStationId",
  category: "data-retrieval",
  maxResponseTime: 10000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsdot_weather_information.getWeatherInformationByStationId.sampleParams || {},
      expectation: "success",
      description: "Validates that MINUTE_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsdot_weather_information.getWeatherInformationByStationId.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsdot_weather_information.getWeatherInformationByStationId,
};

/**
 * All endpoint configurations for this API
 */
export const wsdot_weather_informationConfigs = [
  getWeatherInformationConfig,
  getWeatherInformationByStationIdConfig,
];

/**
 * API module configuration
 */
export const wsdot_weather_informationModuleConfig = {
  moduleName: "Wsdot Weather Information",
  endpoints: wsdot_weather_informationConfigs,
  settings: {
    baseTimeout: 30000,
    requiresAuth: false,
    rateLimit: {
      requestsPerSecond: 10,
      burstLimit: 50,
    },
    testCategories: ["data-retrieval","validation","performance"],
  },
};
