/**
 * @fileoverview Auto-generated test configuration for Wsf Vessels API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";

// Import the actual endpoint definitions
import * as wsf_vessels from "@/clients/wsf-vessels";

/**
 * Auto-generated test configuration for cacheFlushDate endpoint
 */
export const cacheFlushDateConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.cacheFlushDate, params),
  inputSchema: wsf_vessels.cacheFlushDate.inputSchema,
  outputSchema: wsf_vessels.cacheFlushDate.outputSchema,
  validParams: wsf_vessels.cacheFlushDate.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "cacheFlushDate",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.cacheFlushDate,
};

/**
 * Auto-generated test configuration for vesselAccommodations endpoint
 */
export const vesselAccommodationsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselAccommodations, params),
  inputSchema: wsf_vessels.vesselAccommodations.inputSchema,
  outputSchema: wsf_vessels.vesselAccommodations.outputSchema,
  validParams: wsf_vessels.vesselAccommodations.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselAccommodations",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselAccommodations.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselAccommodations.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselAccommodations,
};

/**
 * Auto-generated test configuration for vesselAccommodationsById endpoint
 */
export const vesselAccommodationsByIdConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselAccommodationsById, params),
  inputSchema: wsf_vessels.vesselAccommodationsById.inputSchema,
  outputSchema: wsf_vessels.vesselAccommodationsById.outputSchema,
  validParams: wsf_vessels.vesselAccommodationsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselAccommodationsById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselAccommodationsById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselAccommodationsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselAccommodationsById,
};

/**
 * Auto-generated test configuration for vesselBasics endpoint
 */
export const vesselBasicsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselBasics, params),
  inputSchema: wsf_vessels.vesselBasics.inputSchema,
  outputSchema: wsf_vessels.vesselBasics.outputSchema,
  validParams: wsf_vessels.vesselBasics.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselBasics",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselBasics.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselBasics.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselBasics,
};

/**
 * Auto-generated test configuration for vesselBasicsById endpoint
 */
export const vesselBasicsByIdConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselBasicsById, params),
  inputSchema: wsf_vessels.vesselBasicsById.inputSchema,
  outputSchema: wsf_vessels.vesselBasicsById.outputSchema,
  validParams: wsf_vessels.vesselBasicsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselBasicsById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselBasicsById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselBasicsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselBasicsById,
};

/**
 * Auto-generated test configuration for vesselHistories endpoint
 */
export const vesselHistoriesConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselHistories, params),
  inputSchema: wsf_vessels.vesselHistories.inputSchema,
  outputSchema: wsf_vessels.vesselHistories.outputSchema,
  validParams: wsf_vessels.vesselHistories.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselHistories",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselHistories.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselHistories.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselHistories,
};

/**
 * Auto-generated test configuration for vesselHistoriesByVesselAndDateRange endpoint
 */
export const vesselHistoriesByVesselAndDateRangeConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselHistoriesByVesselAndDateRange, params),
  inputSchema: wsf_vessels.vesselHistoriesByVesselAndDateRange.inputSchema,
  outputSchema: wsf_vessels.vesselHistoriesByVesselAndDateRange.outputSchema,
  validParams: wsf_vessels.vesselHistoriesByVesselAndDateRange.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselHistoriesByVesselAndDateRange",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselHistoriesByVesselAndDateRange.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselHistoriesByVesselAndDateRange.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselHistoriesByVesselAndDateRange,
};

/**
 * Auto-generated test configuration for vesselLocations endpoint
 */
export const vesselLocationsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselLocations, params),
  inputSchema: wsf_vessels.vesselLocations.inputSchema,
  outputSchema: wsf_vessels.vesselLocations.outputSchema,
  validParams: wsf_vessels.vesselLocations.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselLocations",
  category: "general",
  maxResponseTime: 5000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselLocations.sampleParams || {},
      expectation: "success",
      description: "Validates that REALTIME_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselLocations.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselLocations,
};

/**
 * Auto-generated test configuration for vesselLocationsById endpoint
 */
export const vesselLocationsByIdConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselLocationsById, params),
  inputSchema: wsf_vessels.vesselLocationsById.inputSchema,
  outputSchema: wsf_vessels.vesselLocationsById.outputSchema,
  validParams: wsf_vessels.vesselLocationsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselLocationsById",
  category: "general",
  maxResponseTime: 5000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselLocationsById.sampleParams || {},
      expectation: "success",
      description: "Validates that REALTIME_UPDATES caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselLocationsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselLocationsById,
};

/**
 * Auto-generated test configuration for vesselStats endpoint
 */
export const vesselStatsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselStats, params),
  inputSchema: wsf_vessels.vesselStats.inputSchema,
  outputSchema: wsf_vessels.vesselStats.outputSchema,
  validParams: wsf_vessels.vesselStats.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselStats",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselStats.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselStats.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselStats,
};

/**
 * Auto-generated test configuration for vesselStatsById endpoint
 */
export const vesselStatsByIdConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselStatsById, params),
  inputSchema: wsf_vessels.vesselStatsById.inputSchema,
  outputSchema: wsf_vessels.vesselStatsById.outputSchema,
  validParams: wsf_vessels.vesselStatsById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselStatsById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselStatsById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselStatsById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselStatsById,
};

/**
 * Auto-generated test configuration for vesselsVerbose endpoint
 */
export const vesselsVerboseConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselsVerbose, params),
  inputSchema: wsf_vessels.vesselsVerbose.inputSchema,
  outputSchema: wsf_vessels.vesselsVerbose.outputSchema,
  validParams: wsf_vessels.vesselsVerbose.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselsVerbose",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselsVerbose.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselsVerbose.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselsVerbose,
};

/**
 * Auto-generated test configuration for vesselsVerboseById endpoint
 */
export const vesselsVerboseByIdConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_vessels.vesselsVerboseById, params),
  inputSchema: wsf_vessels.vesselsVerboseById.inputSchema,
  outputSchema: wsf_vessels.vesselsVerboseById.outputSchema,
  validParams: wsf_vessels.vesselsVerboseById.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "vesselsVerboseById",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_vessels.vesselsVerboseById.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_vessels.vesselsVerboseById.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_vessels.vesselsVerboseById,
};

/**
 * All endpoint configurations for this API
 */
export const wsf_vesselsConfigs = [
  cacheFlushDateConfig,
  vesselAccommodationsConfig,
  vesselAccommodationsByIdConfig,
  vesselBasicsConfig,
  vesselBasicsByIdConfig,
  vesselHistoriesConfig,
  vesselHistoriesByVesselAndDateRangeConfig,
  vesselLocationsConfig,
  vesselLocationsByIdConfig,
  vesselStatsConfig,
  vesselStatsByIdConfig,
  vesselsVerboseConfig,
  vesselsVerboseByIdConfig,
];

/**
 * API module configuration
 */
export const wsf_vesselsModuleConfig = {
  moduleName: "Wsf Vessels",
  endpoints: wsf_vesselsConfigs,
  settings: {
    baseTimeout: 30000,
    requiresAuth: false,
    rateLimit: {
      requestsPerSecond: 5,
      burstLimit: 20,
    },
    testCategories: ["data-retrieval","validation","performance"],
  },
};
