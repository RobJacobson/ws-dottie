/**
 * @fileoverview Auto-generated test configuration for Wsf Fares API
 *
 * This file is automatically generated from discovered Endpoint objects.
 * Do not edit manually - changes will be overwritten.
 */

import type { Endpoint } from "@/shared/endpoints";
import { fetchWithZod } from "@/shared/fetching";
import type { EndpointTestConfig } from "../generators/configGenerator";

// Import the actual endpoint definitions
import * as wsf_fares from "@/clients/wsf-fares";

/**
 * Auto-generated test configuration for cacheFlushDate endpoint
 */
export const cacheFlushDateConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.cacheFlushDate, params),
  inputSchema: wsf_fares.cacheFlushDate.inputSchema,
  outputSchema: wsf_fares.cacheFlushDate.outputSchema,
  validParams: wsf_fares.cacheFlushDate.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "cacheFlushDate",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.cacheFlushDate.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.cacheFlushDate,
};

/**
 * Auto-generated test configuration for fareLineItems endpoint
 */
export const fareLineItemsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.fareLineItems, params),
  inputSchema: wsf_fares.fareLineItems.inputSchema,
  outputSchema: wsf_fares.fareLineItems.outputSchema,
  validParams: wsf_fares.fareLineItems.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "fareLineItems",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.fareLineItems.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.fareLineItems.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.fareLineItems,
};

/**
 * Auto-generated test configuration for fareLineItemsBasic endpoint
 */
export const fareLineItemsBasicConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.fareLineItemsBasic, params),
  inputSchema: wsf_fares.fareLineItemsBasic.inputSchema,
  outputSchema: wsf_fares.fareLineItemsBasic.outputSchema,
  validParams: wsf_fares.fareLineItemsBasic.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "fareLineItemsBasic",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.fareLineItemsBasic.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.fareLineItemsBasic.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.fareLineItemsBasic,
};

/**
 * Auto-generated test configuration for fareLineItemsVerbose endpoint
 */
export const fareLineItemsVerboseConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.fareLineItemsVerbose, params),
  inputSchema: wsf_fares.fareLineItemsVerbose.inputSchema,
  outputSchema: wsf_fares.fareLineItemsVerbose.outputSchema,
  validParams: wsf_fares.fareLineItemsVerbose.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "fareLineItemsVerbose",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.fareLineItemsVerbose.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.fareLineItemsVerbose.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.fareLineItemsVerbose,
};

/**
 * Auto-generated test configuration for faresTerminals endpoint
 */
export const faresTerminalsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.faresTerminals, params),
  inputSchema: wsf_fares.faresTerminals.inputSchema,
  outputSchema: wsf_fares.faresTerminals.outputSchema,
  validParams: wsf_fares.faresTerminals.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "faresTerminals",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.faresTerminals.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.faresTerminals.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.faresTerminals,
};

/**
 * Auto-generated test configuration for faresValidDateRange endpoint
 */
export const faresValidDateRangeConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.faresValidDateRange, params),
  inputSchema: wsf_fares.faresValidDateRange.inputSchema,
  outputSchema: wsf_fares.faresValidDateRange.outputSchema,
  validParams: wsf_fares.faresValidDateRange.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "faresValidDateRange",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.faresValidDateRange.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.faresValidDateRange.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.faresValidDateRange,
};

/**
 * Auto-generated test configuration for fareTotals endpoint
 */
export const fareTotalsConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.fareTotals, params),
  inputSchema: wsf_fares.fareTotals.inputSchema,
  outputSchema: wsf_fares.fareTotals.outputSchema,
  validParams: wsf_fares.fareTotals.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "fareTotals",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.fareTotals.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.fareTotals.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.fareTotals,
};

/**
 * Auto-generated test configuration for terminalCombo endpoint
 */
export const terminalComboConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.terminalCombo, params),
  inputSchema: wsf_fares.terminalCombo.inputSchema,
  outputSchema: wsf_fares.terminalCombo.outputSchema,
  validParams: wsf_fares.terminalCombo.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalCombo",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.terminalCombo.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.terminalCombo.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.terminalCombo,
};

/**
 * Auto-generated test configuration for terminalComboVerbose endpoint
 */
export const terminalComboVerboseConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.terminalComboVerbose, params),
  inputSchema: wsf_fares.terminalComboVerbose.inputSchema,
  outputSchema: wsf_fares.terminalComboVerbose.outputSchema,
  validParams: wsf_fares.terminalComboVerbose.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalComboVerbose",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.terminalComboVerbose.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.terminalComboVerbose.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.terminalComboVerbose,
};

/**
 * Auto-generated test configuration for terminalMates endpoint
 */
export const terminalMatesConfig: EndpointTestConfig<any, any> = {
  apiFunction: (params: any) => fetchWithZod(wsf_fares.terminalMates, params),
  inputSchema: wsf_fares.terminalMates.inputSchema,
  outputSchema: wsf_fares.terminalMates.outputSchema,
  validParams: wsf_fares.terminalMates.sampleParams || {},
  invalidParams: [
    {},
    { invalidField: "invalidValue" },
  ],
  endpointName: "terminalMates",
  category: "general",
  maxResponseTime: 120000,
  customTests: [
    {
      name: "Cache Strategy Validation",
      params: wsf_fares.terminalMates.sampleParams || {},
      expectation: "success",
      description: "Validates that DAILY_STATIC caching works correctly",
    },
    {
      name: "Sample Parameters Test",
      params: wsf_fares.terminalMates.sampleParams || {},
      expectation: "success",
      description: "Tests with the provided sample parameters",
    },
  ],
  endpointDefinition: wsf_fares.terminalMates,
};

/**
 * All endpoint configurations for this API
 */
export const wsf_faresConfigs = [
  cacheFlushDateConfig,
  fareLineItemsConfig,
  fareLineItemsBasicConfig,
  fareLineItemsVerboseConfig,
  faresTerminalsConfig,
  faresValidDateRangeConfig,
  fareTotalsConfig,
  terminalComboConfig,
  terminalComboVerboseConfig,
  terminalMatesConfig,
];

/**
 * API module configuration
 */
export const wsf_faresModuleConfig = {
  moduleName: "Wsf Fares",
  endpoints: wsf_faresConfigs,
  settings: {
    baseTimeout: 30000,
    requiresAuth: false,
    rateLimit: {
      requestsPerSecond: 5,
      burstLimit: 20,
    },
    testCategories: ["data-retrieval","validation","performance"],
  },
};
